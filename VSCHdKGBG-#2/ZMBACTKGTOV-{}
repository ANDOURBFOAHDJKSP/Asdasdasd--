local openshit = Instance.new("ScreenGui")
local mainopen = Instance.new("TextButton")
local mainopens = Instance.new("UICorner")
local loki = Instance.new("ImageLabel")
local posto = Instance.new("UIStroke")

openshit.Name = "openshit"
openshit.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
openshit.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
openshit.ResetOnSpawn = false

mainopen.Name = "mainopen"
mainopen.Parent = openshit
mainopen.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainopen.Position = UDim2.new(0.101969875, 0, 0.110441767, 0)
mainopen.Size = UDim2.new(0, 64, 0, 42)
mainopen.Text = " "
mainopen.Visible = true

mainopens.Parent = mainopen
 
loki.Name = "loki"
loki.Parent = mainopen
loki.BackgroundColor3 = Color3.fromRGB(224,224,224)
loki.BackgroundTransparency = 1.000
loki.Position = UDim2.new(-0.0529999994, 0, -0.244000003, 0)
loki.Size = UDim2.new(0, 69, 0, 62)
loki.Image = "rbxassetid://17339439921"
 
posto.Name = "posto"
posto.Parent = mainopen
posto.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
posto.Color = Color3.fromRGB(224,224,224)
posto.LineJoinMode = Enum.LineJoinMode.Round
posto.Thickness = 1
posto.Transparency = 0
posto.Enabled = true
posto.Archivable = true
 
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
 
local function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil
    local DragStart = nil
    local StartPosition = nil
    
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {
            Position = pos
        })
        Tween:Play()
    end
    
    topbarobject.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position
                
                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end
                )
            end
        end
    )
    
    topbarobject.InputChanged:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                DragInput = input
            end
        end
    )
    
    UserInputService.InputChanged:Connect(
        function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end
    )
end

MakeDraggable(mainopen, mainopen) -- Making the button draggable

mainopen.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "K", false, game)
    game:GetService("VirtualInputManager"):SendKeyEvent(false, "K", false, game)
end)

local player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")

local fpsCounter = Instance.new("ScreenGui")
fpsCounter.Parent = game.CoreGui
fpsCounter.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
fpsCounter.ResetOnSpawn = false

local label = Instance.new("TextLabel")
label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
label.BackgroundTransparency = 1.000
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.Font = Enum.Font.GothamBlack
label.Size = UDim2.new(0, 150, 0, 70)
label.Position = UDim2.new(0, 200, 0, 10)
label.Text = "FPS: 0\nTime Played: 0h 0m 0s"
label.TextSize = 10
label.Parent = fpsCounter

local startTime = tick()
local lastUpdateTime = tick()
local frameCount = 0

RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime
    frameCount = frameCount + 1

    if deltaTime >= 1 then
        local fps = math.round(frameCount / deltaTime)
        local elapsedTime = currentTime - startTime

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        label.Text = "FPS: " .. fps .. "\nTime Played: " .. hours .. "h " .. minutes .. "m " .. seconds .. "s"

        lastUpdateTime = currentTime
        frameCount = 0
    end
end)


local workspace = game:GetService("Workspace")
local playerpos = 0
local zombiepos = 0
local bosspos = 0
local console = {}
local virtualxray = {}
local RunService = game:GetService("RunService")
local normalgrav = workspace.Gravity
local TweenService = game:GetService("TweenService")
local _rs_gun = {}
local _rs_knive = {}
local _rs_enemies = {}
local _rs_bosses = {}
local _rs_auras = {}
local Player = game:GetService("Players").LocalPlayer
local player = Player
local targetFolders = {
    workspace.enemies,
    workspace.deadenemies,
    workspace.BossFolder
}
local vu = game:GetService("VirtualUser")
local TeleportService = game:GetService('TeleportService')
local ReplicatedStorage = game:GetService("ReplicatedStorage")

function KillZombies(weapontype,partaim)
if weapontype == "gun" then
game:GetService("ReplicatedStorage").Gun:FireServer({["Normal"] = Vector3.new(0,0,0),["Direction"] = getNearest()[partaim].Position,["Name"] = getEquippedWeapon(game.Players.LocalPlayer),["Hit"] = getNearest()[partaim],["Origin"] = getNearest()[partaim].Position,["Pos"] = getNearest()[partaim].Position})
elseif weapontype == "melee" then
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest()[partaim])
else
	return "INVALID WEAPON TYPE"
end
end

function AddTable(TableTrigger,LocalTrigger)
        for _,v in pairs(TableTrigger:GetChildren()) do
            table.insert(LocalTrigger,v.Name)
        end
       end
       

local function getNearest()
    local nearest, dist = nil, math.huge -- Set a very large initial distance
    for _, v in pairs(game.Workspace.BossFolder:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    for _, v in pairs(game.Workspace.enemies:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    return nearest
end

local function getNearest2()
    local nearest, dist = nil, math.huge -- Set a very large initial distance
    for _, v in pairs(game.Workspace.BossFolder:GetDescendants()) do
        if v:FindFirstChild("HumanoidRootPart") then
            local m = (Player.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    for _, v in pairs(game.Workspace.enemies:GetDescendants()) do
        if v:FindFirstChild("HumanoidRootPart") then
            local m = (Player.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    return nearest
end

print("HWID FOUND!")

print("-- Fast Main Loader V3")
print("-- Unknown Hub X 1/3: Checking Game...")

print("-- Unknown Hub X 2/3: Getting Service...")

print("-- Unknown Hub X 3/3 Exploit Support...")

print("Main Loaded")

local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
   Name = "Unknown Hub X Zombie Attack",
   LoadingTitle = "Unknown Hub X Universal",
   LoadingSubtitle = "by Guesttester_1",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = UnknownHubXUniversal,-- Create a custom folder for your hub/game
      FileName = "ZombieAttack"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },
   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided",
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Farming = Window:CreateTab("Farming", 0) -- Title, Image
local Zombie = Window:CreateTab("Zombie Mods", 0) -- Title, Image
local Tool = Window:CreateTab("Tool Mods", 0) -- Title, Image

Rayfield:Notify({
   Title = "Made by Guesttester_1",
   Content = " ",
   Duration = 10,
   Image = 0,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

Rayfield:Notify({
   Title = "Changed Gui Library",
   Content = " ",
   Duration = 6.5,
   Image = 0,
   Actions = { -- Notification Buttons
      Ignore = {
         Name = "Okay!",
         Callback = function()
         print("The user tapped Okay!")
      end
   },
},
})

-- Farming

local Label = Farming:CreateLabel("Farmings")
    
  local normalgrav = workspace.Gravity
  
  local Toggle = Farming:CreateToggle({
   Name = "Auto Farm Zombie",
   CurrentValue = false,
   Flag = "FarmingZombie", 
   Callback = function(bool)
        _G._tp_farm = bool
if _G._tp_farm == true then
	workspace.Gravity = 0
else
	workspace.Gravity = normalgrav
end

local near = getNearest()

local groundDistance = 12

function farmzombie()
if _G._tp_farm == true then
if _G._userGun == true and near then
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 10))
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 10))
game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position,})
end
end
end

repeat
wait(.2)
spawn(farmzombie)
until not _G._tp_farm == true
   end,
})

Toggle:Set(false)

local AutoCollectSystemIndic2 = false

local Toggle = Farming:CreateToggle({
   Name = "Auto Collect Power ups",
   CurrentValue = false,
   Flag = "AutoPowerups", 
   Callback = function(State)
AutoCollectSystemIndic2 = State
workspace.Powerups.ChildAdded:Connect(function(variable)
game:GetService("RunService").Heartbeat:Connect(function()
if AutoCollectSystemIndic2 == true then
for i,v in pairs(variable:GetDescendants()) do
	if v:IsA("Part") or v:IsA("BasePart") then
	v.CFrame = CFrame.new(Player.Character.Torso.Position + Vector3.new(0, 0, 0.8))
	v.Position = Player.Character.Torso.Position + Vector3.new(0, 0, 0.8)
	v.CanCollide = false
	RunService.Heartbeat:Wait()
	end
	end
	end
    end)
    end)
   end,
})
    
local Toggle = Farming:CreateToggle({
   Name = "Auto Claim Mission Reward",
   CurrentValue = false,
   Flag = "AutoClaimMission", 
   Callback = function(State)
        _G._claimUserMission = State
	while wait() do
		if _G._claimUserMission == false then break end
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",1)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",2)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",3)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",4)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",5)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",6)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",7)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",8)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",9)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",10)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",11)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",12)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",13)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",14)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",15)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",16)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",17)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",18)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",19)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",20)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",21)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",22)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",23)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",24)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",25)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",26)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",27)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",28)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",29)
	end
   end,
})

local Toggle = Farming:CreateToggle({
   Name = "Auto Discard Mission Reward",
   CurrentValue = false,
   Flag = "ClearMission", 
   Callback = function(State)
        _G._discardUserMission = State
	while wait() do
		if _G._discardUserMission == false then break end
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",1)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",2)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",3)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",4)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",5)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",6)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",7)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",8)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",9)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",10)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",11)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",12)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",13)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",14)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",15)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",16)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",17)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",18)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",19)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",20)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",21)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",22)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",23)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",24)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",25)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",26)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",27)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",28)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",29)
	end
	end,
})
    
 local Label = Farming:CreateLabel("Notification")
 
local control = {
	Money = false,
	Kill = false,
	Level = false
}
 local Toggle = Farming:CreateToggle({
   Name = "Level Notification",
   CurrentValue = false,
   Flag = "LevelNotify", 
   Callback = function(State)
control.Level = State
   end,
})
    
    
local Toggle = Farming:CreateToggle({
   Name = "Money Notification",
   CurrentValue = false,
   Flag = "MoneyNotify", 
   Callback = function(State)
control.Money = State
   end,
})

local Toggle = Farming:CreateToggle({
   Name = "Kill Notification",
   CurrentValue = false,
   Flag = "KillNotify", 
   Callback = function(State)
control.Kill = State
   end,
})
 
 Player.leaderstats.Cash:GetPropertyChangedSignal("Value"):Connect(function()
if control.Money == true then
game.StarterGui:SetCore("SendNotification", {
    Title = "$ Money Notification $",
    Text = "Money Counted: [ " .. tostring(Player.leaderstats.Cash.Value) .. " ]",
    Duration = 5
})
end
end)

Player.leaderstats.Kills:GetPropertyChangedSignal("Value"):Connect(function()
    if control.Kill == true then
        game.StarterGui:SetCore("SendNotification", {
            Title = "☠️ Killed Notification ☠️",
            Text = "Weapon Type: " .. tostring(getEquippedWeapon(Player)) .. "\nKilled Counted: [  " .. tostring(Player.leaderstats.Kills.Value) .. " ]",
            Duration = 5
        })
    end
end)


Player.leaderstats.Level:GetPropertyChangedSignal("Value"):Connect(function()
if control.Level == true then
game.StarterGui:SetCore("SendNotification", {
    Title = "↑ Level Notification ↑",
    Text = "Level Counted: [ " .. tostring(Player.leaderstats.Level.Value) .. " ]",
    Duration = 5
})

end
end)

local Label = Farming:CreateLabel("Auto Crate (Coming Soon :)")

local Label = Farming:CreateLabel("Farmings Settings")

local Toggle = Farming:CreateToggle({
   Name = "Anti AFK",
   CurrentValue = false,
   Flag = "AntiAFK",
   Callback = function()
local vu = game:GetService("VirtualUser")
repeat wait() until game:IsLoaded() 
	game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
     end)
   end,
})

local Input = Farming:CreateInput({
   Name = "Walk Speed",
   PlaceholderText = "Speed",
   RemoveTextAfterFocusLost = false,
   Callback = function(WS)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WS
   end,
})

local Input = Farming:CreateInput({
   Name = "Jump Power",
   PlaceholderText = "Jump",
   RemoveTextAfterFocusLost = false,
   Callback = function(JP)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = JP
   end,
})

local Slider = Farming:CreateSlider({
   Name = "Ground Distance",
   Range = {12, 30},
   Increment = 10,
   Suffix = "Y",
   CurrentValue = 12,
   Flag = "GroundDistance",
   Callback = function(Xz)
   groundDistance = Xz
   end,
})

-- Zombie

local Label = Zombie:CreateLabel("Zombie ESP")

local ESP = false

local Toggle = Zombie:CreateToggle({
   Name = "Zombie ESP",
   CurrentValue = false,
   Flag = "ZombieESP", 
   Callback = function(bool)
ESP = bool

spawn(function()
    while wait(0.2) do
        pcall(function()
            if ESP then
                for i, v in pairs(game:GetService("Workspace").enemies:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.TextScaled = false
                            TextLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").enemies:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)
   end,
})
    
 local ESP2 = false
 
local Toggle = Zombie:CreateToggle({
   Name = "Boss ESP",
   CurrentValue = false,
   Flag = "BossESP",
   Callback = function(bool)
ESP2 = bool

spawn(function()
    while wait(0.2) do
        pcall(function()
            if ESP2 then
                for i, v in pairs(game:GetService("Workspace").BossFolder:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.TextScaled = false
                            TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").BossFolder:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)
   end,
})

local Label = Zombie:CreateLabel("Zombie Mods")

local mainsize = 7
local HitboxSize = 3

local BigHead = false

local Toggle = Zombie:CreateToggle({
   Name = "Big Head",
   CurrentValue = false,
   Flag = "BigHead", 
   Callback = function(value)
BigHead = value
while BigHead and wait(0.2) do

for _, targetFolder in ipairs(targetFolders) do
    for _, value in pairs(targetFolder:GetDescendants()) do
        if value:FindFirstChild("Head") or value:FindFirstChild("Torso") then
            if value.Name ~= game:GetService("Players").LocalPlayer.Name then
            pcall(function()
                value.Head.Transparency = 0.7
                value.Head.CanCollide = false
                value.Head.Size = Vector3.new(mainsize, mainsize, mainsize)
                value.Head.CFrame = value.Torso.CFrame * CFrame.new(0, 1, 0)
                end)
            end
        end
    end

for _, value in pairs(targetFolder:GetDescendants()) do
        if value:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            if value.Name ~= game:GetService("Players").LocalPlayer.Name then
                value.HumanoidRootPart.Transparency = 0.9
                value.HumanoidRootPart.CanCollide = false
                value.HumanoidRootPart.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                end
            end)
        end
    end
end
end
   end,
})

-- Tool

local globalTarget = nil
local camera = workspace.CurrentCamera

_G._ZombieKillPart = "Head"
_G._ZombieKillPart2 = "HumanoidRootPart"

function RayFromCamera()
local ray = Ray.new(workspace.CurrentCamera.CFrame.p, workspace.CurrentCamera.CFrame.lookVector * 100)

local ignoreList = {Player.Character} -- Daftar objek yang akan diabaikan saat raycasting

local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

if hit then
    return "Object name: " .. tostring(hit.Name) .. "\nSurface normal at hit point: nil\nObject found at position: \n" .. tostring(position)
end
end

function RayFromHead()
local ray = Ray.new(Player.Character.Head.Position, Player.Character.Head.CFrame.lookVector * 100)
local ignoreList = {Player.Character} -- Kita tidak ingin ray mengenai karakter pemain itu sendiri

local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

if hit then
    return "Object name: " .. tostring(hit.Name) .. "\nSurface normal at hit point: nil\nObject found at position: \n" .. tostring(position)
    --highlightPart(hit)
end
end

local function wallbang(pos,vic,func)
    local ray = Ray.new(pos,(pos - vic.Position).unit * 500)
    local hitPart,hitPosition = workspace:FindPartOnRay(ray,workspace["map"],true,true)
    if hitPart then
        func(hitPosition)
    end
end

local function isBehindWall(player)
    local ray = Ray.new(camera.CFrame.Position, player.Head.Position - camera.CFrame.Position)
    local hit = game.GetService(game, "Workspace").FindPartOnRayWithWhitelist(game.GetService(game, "Workspace"), ray, {game.GetService(game, "Workspace").enemies})
    if hit and hit.Parent == player then
        return false
    end
    return true
end

function getEquippedWeapon(player)
        local char = player.Character
        local weapon = char and char:FindFirstChildWhichIsA("Tool")
    
        if weapon ~= nil then
            return weapon.Name
        else
            return "None"
        end
    end

function KillZombies(weapontype,partaim)
if weapontype == "gun" then
game:GetService("ReplicatedStorage").Gun:FireServer({["Normal"] = Vector3.new(0,0,0),["Direction"] = getNearest()[partaim].Position,["Name"] = getEquippedWeapon(game.Players.LocalPlayer),["Hit"] = getNearest()[partaim],["Origin"] = getNearest()[partaim].Position,["Pos"] = getNearest()[partaim].Position})
elseif weapontype == "melee" then
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest()[partaim])
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest2()[partaim])
else
	return "INVALID WEAPON TYPE"
end
end

function GetToolName()
for _,Thing in pairs(game:GetService("ReplicatedStorage").Guns:GetChildren()) do
   if Thing:IsA("Tool") then
      return Thing.Name
   end
 end
end


local ConfirmSystem = {
	Damage = false,
	Tracking = false,
	Wallbang = false
}

local gmt = getrawmetatable(game)
setreadonly(gmt, false)
local oldNamecall = gmt.__namecall
gmt.__namecall = newcclosure(function(self, ...)
                local Args = {...}
                local method = getnamecallmethod()
                if tostring(self) == "Gun" and tostring(method) == "FireServer" and ConfirmSystem.Damage == true then
		      Args[1]["Normal"] = Vector3.new(0,0,0)
                      Args[1]["Direction"] = getNearest()[_G._ZombieKillPart].Position
                      Args[1]["Name"] = getEquippedWeapon(game.Players.LocalPlayer)
                      Args[1]["Hit"] = getNearest()[_G._ZombieKillPart]
                      Args[1]["Origin"] = getNearest()[_G._ZombieKillPart].Position
                      Args[1]["Pos"] = getNearest()[_G._ZombieKillPart].Position
		    return self.FireServer(self, unpack(Args))
		--end
	        elseif tostring(self) == "forhackers" and tostring(method) == "InvokeServer" and ConfirmSystem.Damage == true then
		      Args[2] = getEquippedWeapon(Player)
		      Args[3] = getNearest()[_G._ZombieKillPart]
		    return self.InvokeServer(self, unpack(Args))
                end
                return oldNamecall(self, ...)
            end)

local Obfuscatedstr = {}
function BlacklistedPart()
workspace.ChildAdded:Connect(function(p)
if p.Name == "map" then
for _,map in pairs(p:GetChildren()) do
	for _,VirtualBlacklisted in pairs(map:GetChildren()) do
		 AddTable(VirtualBlacklisted,Obfuscatedstr)
end
end
end
end)
--function end
end

local Circle = Drawing.new("Circle")
Circle.Color = Color3.fromRGB(22, 13, 56)
Circle.Thickness = 1
Circle.Radius = 500
Circle.Visible = false
Circle.NumSides = 2000
Circle.Filled = false
Circle.Transparency = 1
Circle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

local function isWithinFOVCircle(vector)
    local circleCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distToCenter = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
    return distToCenter <= Circle.Radius
end

local function V4()
--V4:
    local closestDist = math.huge
    local closestPlr = nil
    local circleCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    
    for _, v in next, game.GetService(game, "Workspace").enemies.GetChildren(game.GetService(game, "Workspace").enemies) do
        if game.FindFirstChild(v,"Humanoid") and v.Humanoid.Health > 0 then
            local vector, onScreen = camera.worldToScreenPoint(camera, game.WaitForChild(v, "Head", math.huge).Position)
            if isWithinFOVCircle(vector) then
                local dist = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
                if dist < closestDist and onScreen and not isBehindWall(v) then
                    closestDist = dist
                    closestPlr = v
                end
            end
        end
    end
    
    for _, v in next, game.GetService(game,"Workspace").BossFolder.GetChildren(game.GetService(game,"Workspace").BossFolder) do
        if game.FindFirstChild(v,"Head") then
            local vector, onScreen = camera.worldToScreenPoint(camera, game.WaitForChild(v, "Head", math.huge).Position)
            if isWithinFOVCircle(vector) then
                local dist = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
                if dist < closestDist and onScreen and not isBehindWall(v) then
                    closestDist = dist
                    closestPlr = v
                end
            end
        end
    end
    
    return closestPlr
end

local function checkClosestEntity(version)
if version == "V4" then
	return V4()
else
	return "INVALID VERSION"
end
end

_G._FOVrender = "V4" or V4()

local namecall;
namecall = hookmetamethod(game, "__namecall", function(Self, ...)
	if not checkcaller() and tostring(getcallingscript()) == "GunController" and string.lower(getnamecallmethod()) == "findpartonraywithwhitelist" then
		local args = {...}
		local Tracking = checkClosestEntity(_G._FOVrender)
		if Tracking and ConfirmSystem.Tracking == true then
			if _G.wb_cheat == true then
				wallbang(args[1].Origin,Tracking.Head,function(magicbullet)
					args[1] = Ray.new(magicbullet,(magicbullet - Tracking.Head.Position).unit * 500)
				end)
			else
			        args[1] = Ray.new(args[1].Origin,Tracking.Head.Position - args[1].Origin,Obfuscatedstr)
			end
		end
		return namecall(Self, unpack(args))
	end
	return namecall(Self, ...)
end)

local nearesthead = targetFolders

function silentaim()
if _G._userGun == true and nearesthead:FindFirstChild("Head") then
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position, ["Damage"] = math.huge,})
end
end

local Label = Tool:CreateLabel("Gun Mods")

local KillAuraRange = 10

local Toggle = Tool:CreateToggle({
   Name = "Silent Aim",
   CurrentValue = false,
   Flag = "SilentAim", 
   Callback = function(bool1)
ConfirmSystem.Tracking = bool1
        BlacklistedPart()
   end,
})
    
local Toggle = Tool:CreateToggle({
   Name = "Auto Shoot",
   CurrentValue = false,
   Flag = "AutoShoot", 
   Callback = function(bool2)
_G._SilentAim = bool2

        repeat
            wait()
             spawn(silentaim)
        until not _G._SilentAim == true
   end,
})
    
local Toggle = Tool:CreateToggle({
   Name = "Bullet Aura",
   CurrentValue = false,
   Flag = "BulletAura", 
   Callback = function(bool3)
ConfirmSystem.Damage = bool3
   end,
})
    
local Label = Tool:CreateLabel("Knife Mods")
   
 local KillAuraRange = 30
local KnifeName = "Omega Scythe"

local Input = Tool:CreateInput({
   Name = "Knife Name",
   PlaceholderText = "Please Put a Knife Name",
   RemoveTextAfterFocusLost = false,
   Callback = function(Value)
   KnifeName = tostring(Value) or "Omega Scythe"
   end,
})

local Toggle = Tool:CreateToggle({
   Name = "Kill Aura",
   CurrentValue = false,
   Flag = "KillAura", 
   Callback = function(bool)
    _G._UserKill = bool
    while wait(000.0001) do
        if _G._UserKill == false then break end
        for _, targetFolder in ipairs(targetFolders) do
            for _, value in pairs(targetFolder:GetDescendants()) do
                if value:FindFirstChild("HumanoidRootPart") then
                    pcall(function()
                        if value.Name ~= game:GetService("Players").LocalPlayer.Name then
                            local humanoidrootpart = value:FindFirstChild("Head")
                            local humanoidrootpart2 = value:FindFirstChild("HumanoidRootPart")
                            local zombiehealth = value:FindFirstChild("Humanoid")
                            local char = game:GetService("Players").LocalPlayer.Character
                            if humanoidrootpart and char and char:FindFirstChild(KnifeName) then
                                local distance = (char.HumanoidRootPart.Position - humanoidrootpart.Position).Magnitude
                                if distance <= KillAuraRange then
                                    KillZombies("melee", _G._ZombieKillPart)
                                    KillZombies("melee", _G._ZombieKillPart2)
                                    humanoidrootpart2.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, 0, -9.3)
                                -- firetouchinterest(humanoidrootpart, char:FindFirstChild(KnifeName).Handle, 1)                                  
                                --  firetouchinterest(humanoidrootpart, char:FindFirstChild(KnifeName).Handle, 0)
                                    firetouchinterest(char:FindFirstChild(KnifeName).Handle, humanoidrootpart, 1)                                  
                                    firetouchinterest(char:FindFirstChild(KnifeName).Handle, humanoidrootpart, 0)
                                end
                            end
                        end
                    end)
                end
            end
        end
    end
   end,
})

local Slider = Tool:CreateSlider({
   Name = "Kill Aura Range",
   Range = {10, 100},
   Increment = 10,
   Suffix = "Distance",
   CurrentValue = 40,
   Flag = "KillAuraRange",
   Callback = function(NG)
   KillAuraRange = NG
   end,
})

local Label = Tool:CreateLabel("Pet Mods")
   
local Orbs = false

function getNearestBullets()
    for _, targetFolder in ipairs(targetFolders) do
        for _, enemy in ipairs(targetFolder:GetDescendants()) do
            local enemyRootPart = enemy:FindFirstChild("HumanoidRootPart")
            if enemyRootPart then                
                local targetPosition = enemyRootPart.Position + Vector3.new(0, 1, 0)
 
                for _, v in pairs(workspace:GetChildren()) do
                    if v.Name == "Part" and v:IsA("BasePart") and v:FindFirstChildWhichIsA("TouchTransmitter") then
                        v.Size = Vector3.new(20, 5, 20)
                        firetouchinterest(enemyRootPart, v, 1)
                        firetouchinterest(enemyRootPart, v, 0)                    
                        -- Tween the part to the target position
                        game:GetService("TweenService"):Create(v, TweenInfo.new(0.2), {Position = targetPosition}):Play()
                        
                        -- Tween the part to the target CFrame
                        game:GetService("TweenService"):Create(v, TweenInfo.new(0.2), {CFrame = CFrame.new(targetPosition)}):Play()
                    end
                end
            end
        end
    end
end

local Toggle = Tool:CreateToggle({
   Name = "Orbs Aura",
   CurrentValue = false,
   Flag = "OrbsAura", 
   Callback = function(bool)
Orbs = bool
	while wait() do
	if Orbs == false then break end
		getNearestBullets()
	end
   end,
})

-- Auto Load Configuration
Rayfield:LoadConfiguration()
