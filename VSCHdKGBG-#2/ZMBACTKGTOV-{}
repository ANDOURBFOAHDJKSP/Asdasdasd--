local openshit = Instance.new("ScreenGui")
local mainopen = Instance.new("TextButton")
local mainopens = Instance.new("UICorner")
local loki = Instance.new("ImageLabel")
local posto = Instance.new("UIStroke")

openshit.Name = "openshit"
openshit.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
openshit.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
openshit.ResetOnSpawn = false

mainopen.Name = "mainopen"
mainopen.Parent = openshit
mainopen.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainopen.Position = UDim2.new(0.101969875, 0, 0.110441767, 0)
mainopen.Size = UDim2.new(0, 64, 0, 42)
mainopen.Text = " "
mainopen.Visible = true

mainopens.Parent = mainopen
 
loki.Name = "loki"
loki.Parent = mainopen
loki.BackgroundColor3 = Color3.fromRGB(224,224,224)
loki.BackgroundTransparency = 1.000
loki.Position = UDim2.new(-0.0529999994, 0, -0.244000003, 0)
loki.Size = UDim2.new(0, 69, 0, 62)
loki.Image = "rbxassetid://17339439921"
 
posto.Name = "posto"
posto.Parent = mainopen
posto.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
posto.Color = Color3.fromRGB(224,224,224)
posto.LineJoinMode = Enum.LineJoinMode.Round
posto.Thickness = 1
posto.Transparency = 0
posto.Enabled = true
posto.Archivable = true
 
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
 
local function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil
    local DragStart = nil
    local StartPosition = nil
    
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {
            Position = pos
        })
        Tween:Play()
    end
    
    topbarobject.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position
                
                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end
                )
            end
        end
    )
    
    topbarobject.InputChanged:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                DragInput = input
            end
        end
    )
    
    UserInputService.InputChanged:Connect(
        function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end
    )
end

MakeDraggable(mainopen, mainopen) -- Making the button draggable

mainopen.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)
    game:GetService("VirtualInputManager"):SendKeyEvent(false, "LeftControl", false, game)
end)

local player = game:GetService("Players").LocalPlayer
local RunService = game:GetService("RunService")

local fpsCounter = Instance.new("ScreenGui")
fpsCounter.Parent = game.CoreGui
fpsCounter.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
fpsCounter.ResetOnSpawn = false

local label = Instance.new("TextLabel")
label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
label.BackgroundTransparency = 1.000
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.Font = Enum.Font.GothamBlack
label.Size = UDim2.new(0, 150, 0, 70)
label.Position = UDim2.new(0, 200, 0, 10)
label.Text = "FPS: 0\nTime Played: 0h 0m 0s"
label.TextSize = 10
label.Parent = fpsCounter

local startTime = tick()
local lastUpdateTime = tick()
local frameCount = 0

RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime
    frameCount = frameCount + 1

    if deltaTime >= 1 then
        local fps = math.round(frameCount / deltaTime)
        local elapsedTime = currentTime - startTime

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        label.Text = "FPS: " .. fps .. "\nTime Played: " .. hours .. "h " .. minutes .. "m " .. seconds .. "s"

        lastUpdateTime = currentTime
        frameCount = 0
    end
end)

local workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local Player = game:GetService("Players").LocalPlayer
local player = Player
local targetFolders = {
    workspace.enemies,
    workspace.deadenemies,
    workspace.BossFolder
}

function KillZombies(weapontype,partaim)
if weapontype == "gun" then
game:GetService("ReplicatedStorage").Gun:FireServer({["Normal"] = Vector3.new(0,0,0),["Direction"] = getNearest()[partaim].Position,["Name"] = getEquippedWeapon(game.Players.LocalPlayer),["Hit"] = getNearest()[partaim],["Origin"] = getNearest()[partaim].Position,["Pos"] = getNearest()[partaim].Position})
elseif weapontype == "melee" then
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest()[partaim])
else
	return "INVALID WEAPON TYPE"
end
end

function AddTable(TableTrigger,LocalTrigger)
        for _,v in pairs(TableTrigger:GetChildren()) do
            table.insert(LocalTrigger,v.Name)
        end
       end
       

local function getNearest()
    local nearest, dist = nil, math.huge -- Set a very large initial distance
    for _, v in pairs(game.Workspace.BossFolder:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    for _, v in pairs(game.Workspace.enemies:GetDescendants()) do
        if v:FindFirstChild("Head") then
            local m = (Player.Character.Head.Position - v.Head.Position).magnitude
            if m < dist then
                dist = m
                nearest = v
            end
        end
    end
    return nearest
end

print("HWID FOUND!")

print("-- Fast Main Loader V3")
print("-- Unknown Hub X 1/3: Checking Game...")

print("-- Unknown Hub X 2/3: Getting Service...")

print("-- Unknown Hub X 3/3 Exploit Support...")

print("Main Loaded")

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Unknown Hub X Zombie Attack V2.2",
    SubTitle = "Made by Guesttester_1",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl -- Used when theres no MinimizeKeybind
})

local Options = Fluent.Options

--Fluent provides Lucide Icons https://lucide.dev/icons/ for the tabs, icons are optional
local Tabs = {
    Farming = Window:AddTab({ Title = "Farming", Icon = " " }),
    Misc = Window:AddTab({ Title = "Misc", Icon = " " }),
    Zombie = Window:AddTab({ Title = "Zombie Mods", Icon = " " }),
    Tool = Window:AddTab({ Title = "Tool Mods", Icon = " " }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

Fluent:Notify({
        Title = "Made by Guesttester_1",
        Content = "",
        SubContent = "", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

Fluent:Notify({
        Title = "Redo Gui",
        Content = "",
        SubContent = "", -- Optional
        Duration = 5 -- Set to nil to make the notification not disappear
    })

-- Farming

Tabs.Farming:AddParagraph({
        Title = "Farmings",
        Content = " "
    })
    
  local normalgrav = workspace.Gravity
  
  local Toggle = Tabs.Farming:AddToggle("FarmZombie", {Title = "Auto Farm Zombie", Default = false })

    Toggle:OnChanged(function(bool)
        _G._tp_farm = bool
if _G._tp_farm == true then
	workspace.Gravity = 0
else
	workspace.Gravity = normalgrav
end

local near = getNearest()

local groundDistance = 12

game:GetService("RunService").RenderStepped:Connect(function()
if _G._tp_farm == true then
if _G._tp_farm == false then game:GetService("RunService").Stepped:Disconnect() end
if _G._userGun == true then
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position,})
RunService.RenderStepped:Wait()
end
end
end)
end)
    
local AutoCollectSystemIndic2 = false

local Toggle = Tabs.Farming:AddToggle("CollectPowers", {Title = "Auto Collect Power Ups", Default = false })

    Toggle:OnChanged(function(State)
        AutoCollectSystemIndic2 = State
workspace.Powerups.ChildAdded:Connect(function(variable)
game:GetService("RunService").Heartbeat:Connect(function()
if AutoCollectSystemIndic2 == true then
for i,v in pairs(variable:GetDescendants()) do
	if v:IsA("Part") or v:IsA("BasePart") then
	v.CFrame = CFrame.new(Player.Character.Torso.Position + Vector3.new(0, 0, 0.8))
	v.Position = Player.Character.Torso.Position + Vector3.new(0, 0, 0.8)
	v.CanCollide = false
	RunService.Heartbeat:Wait()
	end
	end
	end
    end)
    end)
    end)
    
local Toggle = Tabs.Farming:AddToggle("ClaimMission", {Title = "Auto Claim Mission", Default = false })

    Toggle:OnChanged(function(State)
        _G._claimUserMission = State
	while wait() do
		if _G._claimUserMission == false then break end
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",1)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",2)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",3)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",4)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",5)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",6)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",7)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",8)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",9)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",10)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",11)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",12)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",13)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",14)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",15)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",16)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",17)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",18)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",19)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",20)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",21)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",22)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",23)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",24)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",25)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",26)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",27)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",28)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("claimReward",29)
	end
    end)
    
local Toggle = Tabs.Farming:AddToggle("ClearMission", {Title = "Auto Discard Mission", Default = false })

    Toggle:OnChanged(function(State)
        _G._discardUserMission = State
	while wait() do
		if _G._discardUserMission == false then break end
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",1)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",2)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",3)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",4)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",5)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",6)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",7)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",8)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",9)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",10)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",11)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",12)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",13)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",14)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",15)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",16)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",17)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",18)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",19)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",20)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",21)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",22)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",23)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",24)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",25)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",26)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",27)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",28)
			game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("discardTask",29)
	end
    end)
    
 Tabs.Farming:AddParagraph({
        Title = "Notification",
        Content = " "
    })
    
local control = {
	Money = false,
	Kill = false,
	Level = false
}

    local Toggle = Tabs.Farming:AddToggle("KillNotify", {Title = "Kill Notification", Default = false })

    Toggle:OnChanged(function(State)
        control.Kill = State
    end)
    
    Options.KillNotify:SetValue(false)
    
    local Toggle = Tabs.Farming:AddToggle("LevelNotify", {Title = "Level Notification", Default = false })

    Toggle:OnChanged(function(State)
        control.Level = State
    end)
    
    Options.LevelNotify:SetValue(false)
    
    local Toggle = Tabs.Farming:AddToggle("MoneyNotify", {Title = "Money Notification", Default = false })

    Toggle:OnChanged(function(State)
        control.Money = State
    end)
    
    Options.MoneyNotify:SetValue(false)
 
 Player.leaderstats.Cash:GetPropertyChangedSignal("Value"):Connect(function()
if control.Money == true then
game.StarterGui:SetCore("SendNotification", {
    Title = "$ Money Notification $",
    Text = "Money Counted: [ " .. tostring(Player.leaderstats.Cash.Value) .. " ]",
    Duration = 5
})
end
end)

Player.leaderstats.Kills:GetPropertyChangedSignal("Value"):Connect(function()
    if control.Kill == true then
        game.StarterGui:SetCore("SendNotification", {
            Title = "☠️ Killed Notification ☠️",
            Text = "Weapon Type: " .. tostring(getEquippedWeapon(Player)) .. "\nKilled Counted: [  " .. tostring(Player.leaderstats.Kills.Value) .. " ]",
            Duration = 5
        })
    end
end)


Player.leaderstats.Level:GetPropertyChangedSignal("Value"):Connect(function()
if control.Level == true then
game.StarterGui:SetCore("SendNotification", {
    Title = "↑ Level Notification ↑",
    Text = "Level Counted: [ " .. tostring(Player.leaderstats.Level.Value) .. " ]",
    Duration = 5
})

end
end)
 
Tabs.Farming:AddParagraph({
        Title = "Auto Crates",
        Content = " "
    })
    
local SelectedCrate = "Basic #1"

local Dropdown = Tabs.Main:AddDropdown("SelectedCrate", {
        Title = "Select Crate",
        Values = {"Basic #1","Basic #2","Basic #3","Uncommon","Rare","Legendary"},
        Multi = false,
        Default = 1,
    })


    Dropdown:OnChanged(function(list)
        SelectedCrate = list
    end)
    
local Toggle = Tabs.Misc:AddToggle("AutoBuyCrate", {Title = "Auto Buy Crates", Default = false })

    Toggle:OnChanged(function(bool)
    OpenCrates = bool
	while wait(0.1) and OpenCrates do
		if OpenCrates == false then break end
         game:GetService("ReplicatedStorage")["RemoteEventContainer"]["CommunicationF"]:InvokeServer("unbox_box",SelectedCrate)
        end
    end)

-- Misc
Tabs.Misc:AddParagraph({
        Title = "Farm Settings",
        Content = " "
    })

local Slider = Tabs.Farming:AddSlider("GroundDistance", {
        Title = "Ground Distance",
        Description = "",
        Default = 12,
        Min = 0,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            groundDistance = tonumber(Value) or 12
        end
    })

Tabs.Misc:AddParagraph({
        Title = "Character",
        Content = " "
    })

local Toggle = Tabs.Misc:AddToggle("AntiAfk", {Title = "Anti-AFK", Default = false })

    Toggle:OnChanged(function()
local vu = game:GetService("VirtualUser")
repeat wait() until game:IsLoaded() 
	game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
     end)
 end)

Options.AntiAfk:SetValue(true)

local Input = Tabs.Misc:AddInput("Walkspeed", {
        Title = "Walk Speed",
        Default = 16,
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(WS)
game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = WS
        end
    })
    
local Input = Tabs.Misc:AddInput("Jumppower", {
        Title = "Jump Power",
        Default = 50,
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(JP)
game.Players.LocalPlayer.Character.Humanoid.JumpPower = JP
        end
    })
    
Tabs.Misc:AddParagraph({
        Title = "Visuals",
        Content = " "
    })
    
local Destroying = false
local Toggle = Tabs.Misc:AddToggle("DestroyMap", {Title = "Destroy Map (Makes the Bullets to shoot zombies)", Default = false })

    Toggle:OnChanged(function(bool)
    Destroying = bool
if Destroying then
    local map = game:GetService("Workspace"):FindFirstChild("map")
if not map then
    warn("Map not found in Workspace")
    return
end

-- Function to clone the map
local function cloneMap(originalMap)
    local mapClone = originalMap:Clone()
    mapClone.Parent = nil -- Keep the clone hidden
    return mapClone
end

-- Function to clear the map
local function clearMap(map)
    for i, v in pairs(map:GetChildren()) do
        v:Destroy()
    end
end

-- Function to restore the map
local function restoreMap(mapClone)
    mapClone.Parent = game:GetService("Workspace")
end

-- Main logic
local mapClone = cloneMap(map)
    -- Clear the map
    clearMap(map)
    
  if not Destroying then
    restoreMap(mapClone)
       end
    end
end)

Tabs.Misc:AddParagraph({
        Title = "Fps Cap",
        Content = ""
    })

local Vav = "500"
    
local Input = Tabs.Misc:AddInput("Input", {
        Title = "Fps Cap",
        Default = Vav,
        Placeholder = "Placeholder",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Fpscap)
     Vav =  tonumber(Fpscap) or 500
setfpscap(Vav)
        end
    })
    
setfpscap(500)

Tabs.Misc:AddParagraph({
        Title = "Anti Lag",
        Content = ""
    })

local Lag1 = false

local Toggle = Tabs.Misc:AddToggle("Anti_Lag1", {Title = "Anti Lag 1", Default = false })

    Toggle:OnChanged(function(Value1)
        Lag1 = Value1
repeat
if Lag1 then
for _, v in pairs(Workspace:GetDescendants()) do
    if v:IsA("BasePart") and not v.Parent:FindFirstChild("Humanoid") then
        v.Material = Enum.Material.SmoothPlastic
        if v:IsA("Texture") then
            v:Destroy()
        end
    end
end
wait(1)
end
until not Lag1 == true
    end)

Options.Anti_Lag1:SetValue(false)

local Toggle = Tabs.Misc:AddToggle("Anti_Lag2", {Title = "Anti Lag 2", Default = false })

    Toggle:OnChanged(function(Value3)
        if Value3 then
        local decalsyeeted = true -- Leaving this on makes games look shitty but the fps goes up by at least 20.
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = false
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
wait(1)
for i,v in pairs(g:GetDescendants()) do
    if v:IsA("Part") or v:IsA("Union") or v:IsA("MeshPart") then
        v.Material = "Plastic"
v.Reflectance = 0
elseif v:IsA("Decal") and decalsyeeted then 
v.Transparency = 1
elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then 
v.Lifetime = NumberRange.new(0)
    end
end
end
    end)

Options.Anti_Lag2:SetValue(false)

local Toggle = Tabs.Misc:AddToggle("Anti_Lag3", {Title = "Anti Lag 3", Default = false })

    Toggle:OnChanged(function(Value4)
        if Value4 then
        local decalsyeeted = true 
local g = game
local w = g.Workspace
local l = g.Lighting
local t = w.Terrain
sethiddenproperty(l,"Technology",2)
sethiddenproperty(t,"Decoration",false)
t.WaterWaveSize = 0
t.WaterWaveSpeed = 0
t.WaterReflectance = 0
t.WaterTransparency = 0
l.GlobalShadows = 0
l.FogEnd = 9e9
l.Brightness = 0
settings().Rendering.QualityLevel = "Level01"
for i, v in pairs(w:GetDescendants()) do
    if v:IsA("BasePart") and not v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif (v:IsA("Decal") or v:IsA("Texture")) and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") and decalsyeeted then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    elseif v:IsA("SpecialMesh") and decalsyeeted  then
        v.TextureId=0
    elseif v:IsA("ShirtGraphic") and decalsyeeted then
        v.Graphic=0
    elseif (v:IsA("Shirt") or v:IsA("Pants")) and decalsyeeted then
        v[v.ClassName.."Template"]=0
    end
end
for i = 1,#l:GetChildren() do
    e=l:GetChildren()[i]
    if e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect") then
        e.Enabled = false
    end
end
w.DescendantAdded:Connect(function(v)
    wait(1)--prevent errors and shit
   if v:IsA("BasePart") and not v:IsA("MeshPart") then
        v.Material = "Plastic"
        v.Reflectance = 0
    elseif v:IsA("Decal") or v:IsA("Texture") and decalsyeeted then
        v.Transparency = 1
    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then
        v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then
        v.BlastPressure = 1
        v.BlastRadius = 1
    elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") or v:IsA("Sparkles") then
        v.Enabled = false
    elseif v:IsA("MeshPart") and decalsyeeted then
        v.Material = "Plastic"
        v.Reflectance = 0
        v.TextureID = 10385902758728957
    elseif v:IsA("SpecialMesh") and decalsyeeted then
        v.TextureId=0
    elseif v:IsA("ShirtGraphic") and decalsyeeted then
        v.ShirtGraphic=0
    elseif (v:IsA("Shirt") or v:IsA("Pants")) and decalsyeeted then
        v[v.ClassName.."Template"]=0
                 end
             end)
         end
    end)

Options.Anti_Lag3:SetValue(false)

function DestroySky()
game.Lighting:SetMinutesAfterMidnight(1)

-- Get the Lighting service
local Lighting = game:GetService("Lighting")

-- Set the skybox color to black
Lighting.OutdoorAmbient = Color3.new(0, 0, 0)
Lighting.Ambient = Color3.new(0, 0, 0)
Lighting.FogColor = Color3.new(0, 0, 0)

local decalid = "rbxasset://textures/Sky/BlackSkyBoxTexture.png"
local sky = Instance.new("Sky", game.Lighting)
    sky.SkyboxBk = decalid
    sky.SkyboxDn = decalid
    sky.SkyboxFt = decalid
    sky.SkyboxLf = decalid
    sky.SkyboxRt = decalid
    sky.SkyboxUp = decalid
end

local Destroy5 = false

local Toggle = Tabs.Misc:AddToggle("Destroy_Sky", {Title = "Dark Sky Mode", Default = false })

    Toggle:OnChanged(function(DV5)
Destroy5 = DV5
repeat 
if Destroy5 then
DestroySky()
wait(1)
end
until not Destroy5 == true
    end)

Options.Destroy_Sky:SetValue(false)

Tabs.Misc:AddButton({
        Title = "White Screen (ON)",
        Description = " ",
        Callback = function()
game:GetService("RunService"):Set3dRenderingEnabled(false)
        end
    })

Tabs.Misc:AddButton({
        Title = "White Screen (OFF)",
        Description = " ",
        Callback = function()
game:GetService("RunService"):Set3dRenderingEnabled(true)
        end
    })

-- Zombie

Tabs.Zombie:AddParagraph({
        Title = "Zombie ESP",
        Content = " "
    })

local ESP = false

local Toggle = Tabs.Zombie:AddToggle("EspZombie", {Title = "Esp Zombie", Default = false })

    Toggle:OnChanged(function(bool)
ESP = bool

spawn(function()
    while wait(0.2) do
        pcall(function()
            if ESP then
                for i, v in pairs(game:GetService("Workspace").enemies:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.TextScaled = false
                            TextLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").enemies:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)
    end)

    Options.EspZombie:SetValue(false)
    
    
 local ESP2 = false
 
local Toggle = Tabs.Zombie:AddToggle("EspBoss", {Title = "Esp Boss", Default = false })

    Toggle:OnChanged(function(bool)
        ESP2 = bool

spawn(function()
    while wait(0.2) do
        pcall(function()
            if ESP2 then
                for i, v in pairs(game:GetService("Workspace").BossFolder:GetChildren()) do
                    if v:FindFirstChild('HumanoidRootPart') then
                        local evilHumanoid = v:FindFirstChild("Humanoid")  -- Change "Humanoid" to "EvilHumanoid"
                        
                        if not v:FindFirstChild("MobEap") then
                            local BillboardGui = Instance.new("BillboardGui")
                            local TextLabel = Instance.new("TextLabel")

                            BillboardGui.Parent = v
                            BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                            BillboardGui.Active = true
                            BillboardGui.Name = "MobEap"
                            BillboardGui.AlwaysOnTop = true
                            BillboardGui.LightInfluence = 1.000
                            BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                            BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)

                            TextLabel.Parent = BillboardGui
                            TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                            TextLabel.BackgroundTransparency = 1.000
                            TextLabel.Size = UDim2.new(0, 200, 0, 50)
                            TextLabel.TextScaled = false
                            TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                            TextLabel.Font = Enum.Font.GothamBold
                            TextLabel.TextSize = 14  -- Adjust the text size to your preference

                            v.MobEap = BillboardGui  -- Store the BillboardGui in MobEap for later use
                        end

                        local distance = math.floor((game.Players.LocalPlayer.Character.HumanoidRootPart.Position - v.HumanoidRootPart.Position).Magnitude)

                        if evilHumanoid then
                            local health = math.floor(evilHumanoid.Health)
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M\nHealth: "..health
                        else
                            v.MobEap.TextLabel.Text = v.Name.." - "..distance.." M"
                        end
                    end
                end
            else
                for i, v in pairs(game:GetService("Workspace").BossFolder:GetChildren()) do
                    if v:FindFirstChild("MobEap") then
                        v.MobEap:Destroy()
                    end
                end
            end
        end)
    end
end)
    end)

    Options.EspBoss:SetValue(false)

Tabs.Zombie:AddParagraph({
        Title = "Zombie Mods",
        Content = " "
    })

local mainsize = 7
local HitboxSize = 3

local BigHead = false

local Toggle = Tabs.Zombie:AddToggle("BigHead", {Title = "Big Zombie Head", Default = false })

    Toggle:OnChanged(function(value)
    BigHead = value
while BigHead and wait(0.2) do

for _, targetFolder in ipairs(targetFolders) do
    for _, value in pairs(targetFolder:GetDescendants()) do
        if value:FindFirstChild("Head") or value:FindFirstChild("Torso") then
            if value.Name ~= game:GetService("Players").LocalPlayer.Name then
            pcall(function()
                value.Head.Transparency = 0.7
                value.Head.CanCollide = false
                value.Head.Size = Vector3.new(mainsize, mainsize, mainsize)
                value.Head.CFrame = value.Torso.CFrame * CFrame.new(0, mainsize/2, 0)
                end)
            end
        end
    end

for _, value in pairs(targetFolder:GetDescendants()) do
        if value:FindFirstChild("HumanoidRootPart") then
        pcall(function()
            if value.Name ~= game:GetService("Players").LocalPlayer.Name then
                value.HumanoidRootPart.Transparency = 0.9
                value.HumanoidRootPart.CanCollide = false
                value.HumanoidRootPart.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                end
            end)
        end
    end
end
end
    end)

    Options.BigHead:SetValue(false)
    
 --[[
    
local Slider = Tabs.Zombie:AddSlider("HeadSize", {
        Title = "Zombies Head Size",
        Description = " ",
        Default = 1,
        Min = 1,
        Max = 30,
        Rounding = 1,
        Callback = function(Value)
            mainsize = tonumber(Value) or 1
        end
    })

local HitboxZombies = false


local Toggle = Tabs.Zombie:AddToggle("HitboxedZombie", {Title = "Hitbox Zombie", Default = false })

Toggle:OnChanged(function(value2)
    HitboxZombies = value2

    while wait(0.2) and HitboxZombies do
        for _, targetFolder in ipairs(targetFolders) do
            for _, value in pairs(targetFolder:GetDescendants()) do
                if value:FindFirstChild("HumanoidRootPart") then
                    pcall(function()
                        if value.Name ~= game:GetService("Players").LocalPlayer.Name then
                            value.HumanoidRootPart.Transparency = 0.9
                --            value.HumanoidRootPart.CanCollide = false
                            value.HumanoidRootPart.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                        end
                    end)
                end
            end
        end
    end
end)

Options.HitboxedZombie:SetValue(false)

local Slider = Tabs.Zombie:AddSlider("Hitboxzombie", {
    Title = "Hitbox Size",
    Description = " ",
    Default = 1,
    Min = 1,
    Max = 30,
    Rounding = 1,
    Callback = function(Value)
        HitboxSize = tonumber(Value) or 1
    end
})

]]

-- Tool

local globalTarget = nil
local camera = workspace.CurrentCamera

_G._ZombieKillPart = "Head"
_G._ZombieKillPart2 = "HumanoidRootPart"

function RayFromCamera()
local ray = Ray.new(workspace.CurrentCamera.CFrame.p, workspace.CurrentCamera.CFrame.lookVector * 100)

local ignoreList = {Player.Character} -- Daftar objek yang akan diabaikan saat raycasting

local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

if hit then
    return "Object name: " .. tostring(hit.Name) .. "\nSurface normal at hit point: nil\nObject found at position: \n" .. tostring(position)
end
end

function RayFromHead()
local ray = Ray.new(Player.Character.Head.Position, Player.Character.Head.CFrame.lookVector * 100)
local ignoreList = {Player.Character} -- Kita tidak ingin ray mengenai karakter pemain itu sendiri

local hit, position = workspace:FindPartOnRayWithIgnoreList(ray, ignoreList)

if hit then
    return "Object name: " .. tostring(hit.Name) .. "\nSurface normal at hit point: nil\nObject found at position: \n" .. tostring(position)
    --highlightPart(hit)
end
end

local function wallbang(pos,vic,func)
    local workspace = game:GetService("Workspace")
    local ray = Ray.new(pos,(pos - vic.Position).unit * 500)
    local hitPart,hitPosition = workspace:FindPartOnRayWithIgnoreList(ray,workspace["map"],true,true)
    if hitPart then
        func(hitPosition)
    end
end

local function isBehindWall(player)
    local ray = Ray.new(camera.CFrame.Position, player.Head.Position - camera.CFrame.Position)
    local hit = game.GetService(game, "Workspace").FindPartOnRayWithWhitelist(game.GetService(game, "Workspace"), ray, {game.GetService(game, "Workspace").enemies})
    if hit and hit.Parent == player then
        return false
    end
    return true
end

function getEquippedWeapon(player)
        local char = player.Character
        local weapon = char and char:FindFirstChildWhichIsA("Tool")
    
        if weapon ~= nil then
            return weapon.Name
        else
            return "None"
        end
    end

function KillZombies(weapontype,partaim)
if weapontype == "gun" then
game:GetService("ReplicatedStorage").Gun:FireServer({["Normal"] = Vector3.new(0,0,0),["Direction"] = getNearest()[partaim].Position,["Name"] = getEquippedWeapon(game.Players.LocalPlayer),["Hit"] = getNearest()[partaim],["Origin"] = getNearest()[partaim].Position,["Pos"] = getNearest()[partaim].Position})
elseif weapontype == "melee" then
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest()[partaim])
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(game.Players.LocalPlayer),getNearest2()[partaim])
else
	return "INVALID WEAPON TYPE"
end
end

function GetToolName()
for _,Thing in pairs(game:GetService("ReplicatedStorage").Guns:GetChildren()) do
   if Thing:IsA("Tool") then
      return Thing.Name
   end
 end
end

local KnifeName = "Omega Scythe"

local ConfirmSystem = {
	Damage = false,
	Tracking = false,
	Throwing = false,
	Wallbang = false
}

local gmt = getrawmetatable(game)
setreadonly(gmt, false)
local oldNamecall = gmt.__namecall
gmt.__namecall = newcclosure(function(self, ...)
                local Args = {...}
                local method = getnamecallmethod()
                if tostring(self) == "Gun" and tostring(method) == "FireServer" and ConfirmSystem.Damage == true then
		      Args[1]["Normal"] = Vector3.new(0,0,0)
                      Args[1]["Direction"] = getNearest()[_G._ZombieKillPart].Position
                      Args[1]["Name"] = getEquippedWeapon(game.Players.LocalPlayer)
                      Args[1]["Hit"] = getNearest()[_G._ZombieKillPart]
                      Args[1]["Origin"] = getNearest()[_G._ZombieKillPart].Position
                      Args[1]["Pos"] = getNearest()[_G._ZombieKillPart].Position
		    return self.FireServer(self, unpack(Args))
		--end
	        elseif tostring(self) == "forhackers" and tostring(method) == "InvokeServer" and ConfirmSystem.Throwing == true then
		      Args[2] = KnifeName
		      Args[3] = getNearest()[_G._ZombieKillPart]
	          Args[3] = getNearest()[_G._ZombieKillPart2]
		    return self.InvokeServer(self, unpack(Args))
                end
                return oldNamecall(self, ...)
            end)

local Obfuscatedstr = {}
function BlacklistedPart()
workspace.ChildAdded:Connect(function(p)
if p.Name == "map" then
for _,map in pairs(p:GetChildren()) do
	for _,VirtualBlacklisted in pairs(map:GetChildren()) do
		 AddTable(VirtualBlacklisted,Obfuscatedstr)
end
end
end
end)
--function end
end

local Circle = Drawing.new("Circle")
Circle.Color = Color3.fromRGB(22, 13, 56)
Circle.Thickness = 1
Circle.Radius = 100
Circle.Visible = false
Circle.NumSides = 2000
Circle.Filled = false
Circle.Transparency = 1
Circle.Position = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)

local function isWithinFOVCircle(vector)
    local circleCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    local distToCenter = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
    return distToCenter <= Circle.Radius
end

local function V4()
--V4:
    local closestDist = math.huge
    local closestPlr = nil
    local circleCenter = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    
    for _, v in next, game.GetService(game, "Workspace").enemies.GetChildren(game.GetService(game, "Workspace").enemies) do
        if game.FindFirstChild(v,"Humanoid") and v.Humanoid.Health > 0 then
            local vector, onScreen = camera.worldToScreenPoint(camera, game.WaitForChild(v, "Head", math.huge).Position)
            if isWithinFOVCircle(vector) then
                local dist = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
                if dist < closestDist and onScreen and not isBehindWall(v) then
                    closestDist = dist
                    closestPlr = v
                end
            end
        end
    end
    
    for _, v in next, game.GetService(game,"Workspace").BossFolder.GetChildren(game.GetService(game, "Workspace").BossFolder) do
        if game.FindFirstChild(v,"Head") then
            local vector, onScreen = camera.worldToScreenPoint(camera, game.WaitForChild(v, "Head", math.huge).Position)
            if isWithinFOVCircle(vector) then
                local dist = (circleCenter - Vector2.new(vector.X, vector.Y)).Magnitude
                if dist < closestDist and onScreen and not isBehindWall(v) then
                    closestDist = dist
                    closestPlr = v
                end
            end
        end
    end
    
    return closestPlr
end

local function checkClosestEntity(version)
if version == "V4" then
	return V4()
else
	return "INVALID VERSION"
end
end

_G._FOVrender = "V4" or V4()

local namecall;
namecall = hookmetamethod(game, "__namecall", function(Self, ...)
	if not checkcaller() and tostring(getcallingscript()) == "GunController" and string.lower(getnamecallmethod()) == "findpartonraywithwhitelist" then
		local args = {...}
		local Tracking = checkClosestEntity(_G._FOVrender)
		if Tracking and ConfirmSystem.Tracking == true then
			if _G.wb_cheat == true then
				wallbang(args[1].Origin,Tracking.Head,function(magicbullet)
					args[1] = Ray.new(magicbullet,(magicbullet - Tracking.Head.Position).unit * 500)
				end)
			else
			        args[1] = Ray.new(args[1].Origin,Tracking.Head.Position - args[1].Origin,Obfuscatedstr)
			end
		end
		return namecall(Self, unpack(args))
	end
	return namecall(Self, ...)
end)

local nearesthead = targetFolders

function silentaim()
if _G._userGun == true and nearesthead:FindFirstChild("Head") then
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
else
-- game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position, ["Damage"] = math.huge,})
end
end

function cameratrack()
if _G._userGun == true and nearesthead then
 game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
-- game:GetService("ReplicatedStorage")["forhackers"]:InvokeServer("hit",getEquippedWeapon(Player),getNearest()[_G._ZombieKillPart])
game:GetService'VirtualUser':CaptureController()
game:GetService'VirtualUser':Button1Down(Vector2.new(501, 362))
game:GetService'VirtualUser':Button1Up(Vector2.new(501, 362))
else
game:GetService("Workspace").CurrentCamera.CFrame = CFrame.new(game:GetService("Workspace").CurrentCamera.CFrame.p, getNearest().Head.Position)
-- Player.Character.HumanoidRootPart.CFrame = (getNearest().HumanoidRootPart.CFrame * CFrame.new(0, groundDistance, 9))
-- game.ReplicatedStorage.Gun:FireServer({["Normal"] = Vector3.new(0, 0, 0), ["Direction"] = getNearest()[_G._ZombieKillPart].Position, ["Name"] = getEquippedWeapon(Player), ["Hit"] = getNearest()[_G._ZombieKillPart], ["Origin"] = getNearest()[_G._ZombieKillPart].Position, ["Pos"] = getNearest()[_G._ZombieKillPart].Position,})
game:GetService'VirtualUser':CaptureController()
game:GetService'VirtualUser':Button1Down(Vector2.new(501, 362))
game:GetService'VirtualUser':Button1Up(Vector2.new(501, 362))
end
return
end

Tabs.Tool:AddParagraph({
        Title = "Gun Mods",
        Content = " "
    })

local KillAuraRange = 10

local Toggle = Tabs.Tool:AddToggle("SilentAim", {Title = "Silent Aim", Default = false })

    Toggle:OnChanged(function(bool1)
    ConfirmSystem.Tracking = bool1
    Circle.Visible = bool1
        BlacklistedPart()
    end)

--    Options.SilentAim:SetValue(false)
    
local Toggle = Tabs.Tool:AddToggle("CameraAimbot", {Title = "Camera Track", Default = false })

    Toggle:OnChanged(function(bool2)
                _G._CameraTrack = bool2

        repeat
            wait()
             cameratrack()
        until not _G._CameraTrack == true
    end)

    Options.CameraAimbot:SetValue(false)
 
 local bullet = {
	Penetrate_1 = false,
	Reverse = false
}
 
local Toggle = Tabs.Tool:AddToggle("WallBang", {Title = "Wallbang (Farming Only)", Default = false })

    Toggle:OnChanged(function(State)
        bullet.Penetrate_1 = State
local bulletSystemV1 = nil
bulletSystemV1 = hookmetamethod(game, "__namecall", function(self, ...)
  local Args = {...}
    if getnamecallmethod() == "FindPartOnRayWithIgnoreList" and bullet.Penetrate_1 == true then
  	if bullet.Reverse == false then
           table.insert(Args[2],workspace.map)
     	else
	         table.insert(workspace.map,Args[2])
         	end
          end
       return bulletSystemV1(self, ...)
    end)
end)

    Options.AutoShoot:SetValue(false)
    
local Toggle = Tabs.Tool:AddToggle("AutoShoot", {Title = "Auto Shoot", Default = false })

    Toggle:OnChanged(function(bool3)
        _G._SilentAim = bool3

        repeat
            wait()
             silentaim()
        until not _G._SilentAim == true
    end)

    Options.AutoShoot:SetValue(false)
    
local Toggle = Tabs.Tool:AddToggle("BulletAura", {Title = "Bullet Aura (Lag)", Default = false })

    Toggle:OnChanged(function(bool3)
    ConfirmSystem.Damage = bool3
    end)

 --   Options.BulletAura:SetValue(false)
    
Tabs.Tool:AddParagraph({
        Title = "Knife Mods",
        Content = " "
    })
   
local KillAuraRange = 30
local KnifeName = "Omega Scythe"

local Input = Tabs.Tool:AddInput("KnifeName", {
    Title = "Knife Name",
    Default = "Omega Scythe",
    Placeholder = "Please Put a Knife Name",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Only calls callback when you press enter
    Callback = function(Value)
        KnifeName = tostring(Value) or "Omega Scythe"
    end
})

local Toggle = Tabs.Tool:AddToggle("KillAura", {Title = "Kill Aura", Default = false })

Toggle:OnChanged(function(bool)
    ConfirmSystem.Throwing = bool
    _G._UserKill = bool
    while wait(000.0001) do
        if _G._UserKill == false then break end
        for _, targetFolder in ipairs(targetFolders) do
            for _, value in pairs(targetFolder:GetDescendants()) do
                if value:FindFirstChild("HumanoidRootPart") then
                    pcall(function()
                        if value.Name ~= game:GetService("Players").LocalPlayer.Name then
                            local humanoidrootpart = value:FindFirstChild("Head")
                            local humanoidrootpart2 = value:FindFirstChild("HumanoidRootPart")
                            local zombiehealth = value:FindFirstChild("Humanoid")
                            local char = game:GetService("Players").LocalPlayer.Character
                            if humanoidrootpart and char and char:FindFirstChild(KnifeName) then
                                local distance = (char.HumanoidRootPart.Position - humanoidrootpart.Position).Magnitude
                                if distance <= KillAuraRange then
                                    KillZombies("melee", _G._ZombieKillPart)
                                    KillZombies("melee", _G._ZombieKillPart2)
                                    humanoidrootpart2.CFrame = char.HumanoidRootPart.CFrame * CFrame.new(0, 0, -9.3)
                                -- firetouchinterest(humanoidrootpart, char:FindFirstChild(KnifeName).Handle, 1)                                  
                                --  firetouchinterest(humanoidrootpart, char:FindFirstChild(KnifeName).Handle, 0)
                                    firetouchinterest(char:FindFirstChild(KnifeName).Handle, humanoidrootpart, 1)                                  
                                    firetouchinterest(char:FindFirstChild(KnifeName).Handle, humanoidrootpart, 0)
                                end
                            end
                        end
                    end)
                end
            end
        end
    end
end)

Options.KillAura:SetValue(false)

local Slider = Tabs.Tool:AddSlider("KnifeRange", {
    Title = "Kill Aura Range",
    Description = "",
    Default = 30,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Callback = function(Value)
        KillAuraRange = tonumber(Value) or 30
    end
})

Tabs.Tool:AddParagraph({
        Title = "Pet Mods",
        Content = " "
    })

local Orbs = false

function getNearestBullets()
    for _, targetFolder in ipairs(targetFolders) do
        for _, enemy in ipairs(targetFolder:GetDescendants()) do
            local enemyRootPart = enemy:FindFirstChild("HumanoidRootPart")
            if enemyRootPart then                
                local targetPosition = enemyRootPart.Position + Vector3.new(0, 1, 0)
 
                for _, v in pairs(workspace:GetChildren()) do
                    if v.Name == "Part" and v:IsA("BasePart") and v:FindFirstChildWhichIsA("TouchTransmitter") then
                        v.Size = Vector3.new(10, 5, 10)
                        firetouchinterest(enemyRootPart, v, 1)
                        firetouchinterest(enemyRootPart, v, 0)                    
                        -- Tween the part to the target position
                        game:GetService("TweenService"):Create(v, TweenInfo.new(0.2), {Position = targetPosition}):Play()
                        
                        -- Tween the part to the target CFrame
                        game:GetService("TweenService"):Create(v, TweenInfo.new(0.2), {CFrame = CFrame.new(targetPosition)}):Play()
                    end
                end
            end
        end
    end
end

local Toggle = Tabs.Tool:AddToggle("OrbsAura", {Title = "Orbs Aura", Default = false })

Toggle:OnChanged(function(bool)
Orbs = bool
	while wait() do
	if Orbs == false then break end
		getNearestBullets()
	end
end)

-- Settings

Tabs.Settings:AddParagraph({
        Title = "Save Config",
        Content = "Save A Config"
    })

-- Save Manager
SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:SetIgnoreIndexes({})

-- Save Folder
InterfaceManager:SetFolder("UnknownHubXUniversal")
SaveManager:SetFolder("UnknownHubXUniversal/ZombieAttack")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- Auto Load Configuration
SaveManager:LoadAutoloadConfig()
