local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Unknownproootest/Unknown-TreasureQuest/Alt/Test_FixMinimizeKey"))()

local openshit = Instance.new("ScreenGui")
local mainopen = Instance.new("TextButton")
local mainopens = Instance.new("UICorner")
local loki = Instance.new("ImageLabel")
local posto = Instance.new("UIStroke")

openshit.Name = "openshit"
openshit.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
openshit.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
openshit.ResetOnSpawn = false

mainopen.Name = "mainopen"
mainopen.Parent = openshit
mainopen.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainopen.Position = UDim2.new(0.101969875, 0, 0.110441767, 0)
mainopen.Size = UDim2.new(0, 64, 0, 42)
mainopen.Text = ""
mainopen.Visible = true
mainopens.Parent = mainopen
 
loki.Name = "loki"
loki.Parent = mainopen
loki.BackgroundColor3 = Color3.fromRGB(224,224,224)
loki.BackgroundTransparency = 1.000
loki.Position = UDim2.new(-0.0529999994, 0, -0.244000003, 0)
loki.Size = UDim2.new(0, 69, 0, 62)
loki.Image = "rbxassetid://17339439921"
 
posto.Name = "posto"
posto.Parent = mainopen
posto.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
posto.Color = Color3.fromRGB(224,224,224)
posto.LineJoinMode = Enum.LineJoinMode.Round
posto.Thickness = 1
posto.Transparency = 0
posto.Enabled = true
posto.Archivable = true
 
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
 
local function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil
    local DragStart = nil
    local StartPosition = nil
    
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {
            Position = pos
        })
        Tween:Play()
    end
    
    topbarobject.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position
                
                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end
                )
            end
        end
    )
    
    topbarobject.InputChanged:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                DragInput = input
            end
        end
    )
    
    UserInputService.InputChanged:Connect(
        function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end
    )
end

MakeDraggable(mainopen, mainopen) -- Making the button draggable

local RunService = game:GetService("RunService")
local fpsCounter = Instance.new("ScreenGui")
fpsCounter.Parent = game.CoreGui
fpsCounter.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
fpsCounter.ResetOnSpawn = false

local label = Instance.new("TextLabel")
label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
label.BackgroundTransparency = 1.000
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.Font = Enum.Font.GothamBlack
label.Size = UDim2.new(0, 150, 0, 70)
label.Position = UDim2.new(0, 200, 0, 10)
label.Text = "FPS: 0\nTime Played: 0h 0m 0s"
label.TextSize = 10
label.Parent = fpsCounter

local startTime = tick()
local lastUpdateTime = tick()
local frameCount = 0

RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime
    frameCount = frameCount + 1
    
    if frameCount == 1 and untilloaded == true then
       game:GetService("Players").LocalPlayer:Kick("Device Saver: CRASH DETECTED")
    end

    if deltaTime >= 1 then
        local fps = math.round(frameCount / deltaTime)
        local elapsedTime = currentTime - startTime

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        label.Text = "FPS: " .. fps .. "\nClient Timer: " .. hours .. "h " .. minutes .. "m " .. seconds .. "s"

        lastUpdateTime = currentTime
        frameCount = 0
    end
end)

if not require then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: require(path) | PLEASE TRY OTHER EXECUTORS")
else
print("Supported require()")
end

if not firetouchinterest  then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: firetouchinterest() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported firetouchinterest()")
end

if not setfpscap or setfpscap(500) then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: setfpscap() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported setfpscap()")
end

if not setfflag then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: setfflag() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported setfflag()")
end

if not hookmetamethod then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: hookmetamethod() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported hookmetamethod()")
end

if game.Players then
print("Advance Api")
else
print("Common Api")
end

local SizeGuiX = 580
local SizeGuiZ = 460

local Window = Fluent:CreateWindow({
    Title = "Unknown Hub X Evade (Overhaul)",
    SubTitle = "V1.7 Made by Unknownproooolucky discord.gg/d2a3KkTD6r",
    TabWidth = 160,
    Size = UDim2.fromOffset(SizeGuiX, SizeGuiZ),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

mainopen.MouseButton1Click:Connect(function()
   Window:Minimize()
end)

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farms", Icon = "" }),
    Nextbot = Window:AddTab({ Title = "Nextbot Mods", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Settings = Window:AddTab({ Title = "Save Config", Icon = "rbxassetid://7734052335" })
--    Admin = Window:AddTab({ Title = "Admin Commands", Icon = "rbxassetid://7734052335" })
}

local Options = Fluent.Options

Fluent:Notify({
        Title = " Announcement ",
        Content = "The icon is fixed that disappearing ur ui and now u can use it",
        SubContent = "Unknownproooolucky Message", -- Optional
        Duration = 10 -- Set to nil to make the notification not disappear
    })

-- Main

Tabs.Main:AddParagraph({
        Title = "ESP",
        Content = " "
    })

function Simple_Create(base, name, trackername, studs)
    local bb = Instance.new("BillboardGui")
    bb.Adornee = base
    bb.ExtentsOffset = Vector3.new(0, 1, 0)
    bb.AlwaysOnTop = true
    bb.Size = UDim2.new(0, 6, 0, 6)
    bb.StudsOffset = Vector3.new(0, 1, 0)
    bb.Name = trackername
    bb.Parent = game.CoreGui

    local frame = Instance.new("Frame")
    frame.ZIndex = 10
    frame.BackgroundTransparency = 0.3
    frame.Size = UDim2.new(3, 0, 3, 0)
    frame.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    frame.Parent = bb

    -- Add UICorner to make the frame circular
    local uiCorner = Instance.new("UICorner")
    uiCorner.CornerRadius = UDim.new(0.5, 0)
    uiCorner.Parent = frame

    local txtlbl = Instance.new("TextLabel")
    txtlbl.ZIndex = 10
    txtlbl.BackgroundTransparency = 1
    txtlbl.Position = UDim2.new(0, 0, 0, -48)
    txtlbl.Size = UDim2.new(1, 0, 10, 0)
    txtlbl.Font = Enum.Font.GothamBold
    txtlbl.Text = name
    txtlbl.TextSize = 14    
    txtlbl.TextStrokeTransparency = 0.5
    txtlbl.TextColor3 = Color3.fromRGB(255, 0, 0)
    txtlbl.Parent = bb
    
    local txtdistance = Instance.new("TextLabel")
    txtdistance.ZIndex = 10
    txtdistance.BackgroundTransparency = 1
    txtdistance.Position = UDim2.new(0, 0, 0, -30)
    txtdistance.Size = UDim2.new(1, 0, 10, 0)
    txtdistance.Font = Enum.Font.GothamBold
    txtdistance.TextSize = 14
    txtdistance.TextStrokeTransparency = 0.5
    txtdistance.TextColor3 = Color3.fromRGB(255, 255, 255)
    txtdistance.Parent = bb
    
    local distance = math.floor((game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - base.Position).Magnitude)
    
    txtdistance.Text = distance.. " M"
end

function ClearESP(espname)
	for _, v in pairs(game.CoreGui:GetChildren()) do
		if v.Name == espname and v:isA("BillboardGui") then
			v:Destroy()
		end
	end
end

function nowaterdmg(t)
	for i, v in next, t:GetChildren() do
		if v.IsA(v, 'BasePart') then
			v.CanTouch = false
		end
	end
end

local BotESP = false

local Toggle = Tabs.Main:AddToggle("ESPBot", {Title = "ESP Bot", Default = false })

    Toggle:OnChanged(function(State)
        BotESP = State
        
        task.spawn(
                function()
			while task.wait(0.4) do
				ClearESP('AI_Tracker')
				if not BotESP then
					break
				end
				pcall(function()
					local GamePlayers = workspace.Game.Players
					for i, v in pairs(GamePlayers:GetChildren()) do
						if not game.Players:FindFirstChild(v.Name) then
							Simple_Create(v.HumanoidRootPart, v.Name, "AI_Tracker")
						end
					end
				end)
			end
	 end)
 end)
    
local PlayerESP = false

local Toggle = Tabs.Main:AddToggle("ESPPlayers", {Title = "ESP Players", Default = false })

Toggle:OnChanged(function(State)
    PlayerESP = State
   
        while PlayerESP and wait(0.4) do
            pcall(function()
                if PlayerESP then
                    local localPlayer = game:GetService("Players").LocalPlayer
                    local localCharacter = localPlayer.Character
                    local localHumanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")
                    
                    if not localHumanoidRootPart then
                        return
                    end

                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local character = player.Character
                            local humanoidRootPart = character.HumanoidRootPart

                            if not humanoidRootPart:FindFirstChild("PlayerESP") then
                                local BillboardGui = Instance.new("BillboardGui")
                                local TextLabel = Instance.new("TextLabel")

                                BillboardGui.Parent = humanoidRootPart
                                BillboardGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
                                BillboardGui.Name = "PlayerESP"
                                BillboardGui.AlwaysOnTop = true
                                BillboardGui.LightInfluence = 1.000
                                BillboardGui.Size = UDim2.new(0, 200, 0, 50)
                                BillboardGui.StudsOffset = Vector3.new(0, 2.5, 0)
                                BillboardGui.MaxDistance = 500

                                TextLabel.Parent = BillboardGui
                                TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
                                TextLabel.BackgroundTransparency = 1.000
                                TextLabel.Size = UDim2.new(0, 200, 0, 50)
                                TextLabel.TextScaled = false
                                TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                                TextLabel.Font = Enum.Font.GothamBold
                                TextLabel.TextSize = 14
                            end

                            local distance = math.floor((localHumanoidRootPart.Position - humanoidRootPart.Position).Magnitude)
                            local labelText = string.format("%s - %d M", player.Name, distance)

                            local gamePlayer = workspace:WaitForChild("Game", 1337).Players:FindFirstChild(player.Name)
                            if gamePlayer and gamePlayer:GetAttribute('Downed') == true then
                                humanoidRootPart.PlayerESP.TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                                labelText = labelText .. " (Downed)"
                            elseif gamePlayer and gamePlayer:GetAttribute('Team') == "Nextbot" then
                                humanoidRootPart.PlayerESP.TextLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
                                labelText = labelText .. " (Enemy)"
                            else
                                humanoidRootPart.PlayerESP.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                            end
                            
                            humanoidRootPart.PlayerESP.TextLabel.Text = labelText
                        end
                    end
                else
                    for _, player in pairs(game.Players:GetPlayers()) do
                        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                            local humanoidRootPart = player.Character.HumanoidRootPart
                            local esp = humanoidRootPart:FindFirstChild("PlayerESP")
                            if esp then
                                esp:Destroy()
                            end
                        end
                    end
                end
            end)
        end
end)

local ObjectiveESP = false

local Toggle = Tabs.Main:AddToggle("ESPObjective", {Title = "ESP Objective", Default = false })

    Toggle:OnChanged(function(State)
        ObjectiveESP = State
        
	
while ObjectiveESP and wait(0.4) do
 pcall(function()
        if ObjectiveESP and workspace.Game.Map.Parts:FindFirstChild("Objectives") then
            local localPlayer = game:GetService("Players").LocalPlayer
            local localCharacter = localPlayer.Character
            local localHumanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")

            if not localHumanoidRootPart then
                return
            end

            for i, v in next, workspace.Game.Map.Parts.Objectives:GetChildren() do
                if v:FindFirstChildWhichIsA("BasePart") then
                    if not v:FindFirstChild("ObjectiveESP") then
                        local BillboardGui = Instance.new("BillboardGui")
                        local TextLabel = Instance.new("TextLabel")

                        -- Billboard settings
                        BillboardGui.Parent = v 
                        BillboardGui.Name = "ObjectiveESP"
                        BillboardGui.AlwaysOnTop = true
                        BillboardGui.Size = UDim2.new(0, 50, 0, 50)
                        BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
                        BillboardGui.MaxDistance = 500

                        -- TextLabel settings
                        TextLabel.Parent = BillboardGui
                        TextLabel.BackgroundColor3 = Color3.new(1, 1, 1) -- White background
                        TextLabel.BackgroundTransparency = 1 -- Fully transparent
                        TextLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the billboard
                        TextLabel.Text = "(OBJECTIVES)" -- Display the grandparent name
                        TextLabel.TextColor3 = Color3.new(1, 0, 0) -- Red text
                        TextLabel.TextScaled = true -- Scale text to fit
                        TextLabel.Font = Enum.Font.GothamBold -- Set font to GothamBold
                    end
                    
                   local distance = math.floor((localHumanoidRootPart.Position - v.Position).Magnitude)
                    v.ObjectiveESP.TextLabel.Text = string.format("(OBJECTIVES) - %d M", distance)
                end
            end
        else
            for _, v in pairs(game.Workspace.Game.Effects.Tickets:GetDescendants()) do
                if v:IsA("BasePart") and v:FindFirstChild("ObjectiveESP") then
                    v.ObjectiveESP:Destroy()
                end
            end
        end
    end)
  end
 end)
 
 local ESPTickets = false

local Toggle = Tabs.Main:AddToggle("ESPCandys", {Title = "ESP Candys", Default = false })

    Toggle:OnChanged(function(State)
        ESPTickets = State
        
        while ESPTickets and wait(0.4) do
        local highlight = workspace.Game.Effects:FindFirstChild("TicketHighlight")

if highlight then
    highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
    highlight.FillTransparency = 0.5  -- Adjust transparency (0 is fully opaque)
    highlight.OutlineTransparency = 0  -- Ensure the outline is visible
    highlight.FillColor = Color3.fromRGB(255, 0, 0)  -- Example: Set fill color to red
    highlight.OutlineColor = Color3.fromRGB(255, 255, 255)  -- Example: Set outline color to white
end
 pcall(function()
        if ESPTickets then
            local localPlayer = game:GetService("Players").LocalPlayer
            local localCharacter = localPlayer.Character
            local localHumanoidRootPart = localCharacter and localCharacter:FindFirstChild("HumanoidRootPart")

            if not localHumanoidRootPart then
                return
            end

            for _, v in pairs(game.Workspace.Game.Effects.Tickets:GetDescendants()) do
                if v:IsA("BasePart") and v.Name == "HumanoidRootPart" then
                    if not v:FindFirstChild("CandyESP") then
                        local BillboardGui = Instance.new("BillboardGui")
                        local TextLabel = Instance.new("TextLabel")

                        -- Billboard settings
                        BillboardGui.Parent = v 
                        BillboardGui.Name = "CandyESP"
                        BillboardGui.AlwaysOnTop = true
                        BillboardGui.Size = UDim2.new(0, 50, 0, 50)
                        BillboardGui.StudsOffset = Vector3.new(0, 2, 0)
                        BillboardGui.MaxDistance = 500

                        -- TextLabel settings
                        TextLabel.Parent = BillboardGui
                        TextLabel.BackgroundColor3 = Color3.new(1, 1, 1) -- White background
                        TextLabel.BackgroundTransparency = 1 -- Fully transparent
                        TextLabel.Size = UDim2.new(1, 0, 1, 0) -- Fill the billboard
                        TextLabel.Text = "Candy Corn" -- Display the grandparent name
                        TextLabel.TextColor3 = Color3.new(1, 0, 0) -- Red text
                        TextLabel.TextScaled = true -- Scale text to fit
                        TextLabel.Font = Enum.Font.GothamBold -- Set font to GothamBold
                    end
                    
                   local distance = math.floor((localHumanoidRootPart.Position - v.Position).Magnitude)
                    v.CandyESP.TextLabel.Text = string.format("Candy Corn - %d M", distance)
                end
            end
        else
            for _, v in pairs(game.Workspace.Game.Effects.Tickets:GetDescendants()) do
                if v:IsA("MeshPart") and v:FindFirstChild("CandyESP") then
                    v.CandyESP:Destroy()
                end
            end
        end
    end)
    end
 end)

Tabs.Main:AddParagraph({
        Title = "Game Mods",
        Content = " "
    })
    
local AutoRespawn = false

local Toggle = Tabs.Main:AddToggle("AutoRespawn", {Title = "Auto Respawn", Default = false })

    Toggle:OnChanged(function(State)
        AutoRespawn = State
      repeat
      wait(0.1)
      if AutoRespawn then
		 local char = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
		   if char and char:GetAttribute("State") == "Downed" then
		        game:GetService("ReplicatedStorage").Events.Player.ChangePlayerMode:FireServer(true)
	      	end
	       end
		until AutoRespawn == false
    end)

local AutoWhistle = false

function autowistlefunction()
   game:GetService("ReplicatedStorage").Events.Character.Whistle:FireServer()
end

local Toggle = Tabs.Main:AddToggle("AutoRespawn", {Title = "Auto Whistle", Default = false })

    Toggle:OnChanged(function(State)
        AutoWhistle = State
      while task.wait(1) and AutoWhistle do
			autowistlefunction()
		end
    end)
    
local Revive_Mod = false
    
local Toggle = Tabs.Main:AddToggle("QuickRevive", {Title = "Quick Revive", Default = false })

    Toggle:OnChanged(function(State)
    Revive_Mod = State
if Revive_Mod then
workspace.Game.Settings:SetAttribute("ReviveTime", 1.75)
		else
workspace.Game.Settings:SetAttribute('ReviveTime', 2)
		end        
    end)
    
function timernotify()
local player = game.Players.LocalPlayer

-- Create a new ScreenGui and Frame
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player.PlayerGui
screenGui.ResetOnSpawn = false
screenGui.Name = "TimerGui"

-- Create a TextLabel for the timer
local timerLabel = Instance.new("TextLabel")
timerLabel.Parent = screenGui
timerLabel.Size = UDim2.new(0, 200, 0, 50)
timerLabel.Position = UDim2.new(0.5, -100, 0.1, 0) -- Centered on screen
timerLabel.BackgroundTransparency = 1 -- Make background invisible
timerLabel.TextScaled = true
timerLabel.Font = Enum.Font.GothamBold
timerLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
end

function detimer()
local player = game.Players.LocalPlayer

if player.PlayerGui:FindFirstChild("TimerGui") then
    player.PlayerGui.TimerGui:Destroy()
  end
end

local TimerText = false

local Toggle = Tabs.Main:AddToggle("TimerNotifier", {Title = "Timer Notifier", Default = false })

    Toggle:OnChanged(function(State)
    TimerText = State

   if TimerText then
   timernotify()
else
   detimer()
  end

    while TimerText and wait(0.1) do
       if game.Players.LocalPlayer.PlayerGui:FindFirstChild("TimerGui") then
             game.Players.LocalPlayer.PlayerGui.TimerGui.TextLabel.Text = workspace.Game.Stats:GetAttribute("Timer")
           end
        end
    end)
 
local NoDamage = false

function disabletouch()
if game:GetService("Players").LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
     nowaterdmg(game:GetService("Players").LocalPlayer.Character)
    end
end

local Toggle = Tabs.Main:AddToggle("RemoveDamageParts", {Title = "Remove Damage Parts", Default = false })

    Toggle:OnChanged(function(State)
    NoDamage = State
repeat
wait(0.1)
if NoDamage then
spawn(disabletouch)
		end  
	 until NoDamage == false
    end)
    
Tabs.Main:AddParagraph({
        Title = "Character Mods",
        Content = " "
    })
    
local Toggle = Tabs.Main:AddToggle("Noclip", {Title = "Noclip", Default = false })

local NoClipx = false

local function Noclip()
            pcall(function()
                for i, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                 end
            end
      end)
end

    Toggle:OnChanged(function(State)
NoClipx = State
repeat
if NoClipx then
   Noclip()
       wait(0.1)
        end
       until not NoClipx == true
    end)

Options.Noclip:SetValue(false)

local RunService = game:GetService("RunService")

local FLYING = false
local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"
local mfly1, mfly2
local currentCharacter

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
end

local function unmobilefly(player)
    pcall(function()
        FLYING = false
        local character = player.Character
        if character then
            local root = getRoot(character)
            if root then
                local velocityHandler = root:FindFirstChild(velocityHandlerName)
                local gyroHandler = root:FindFirstChild(gyroHandlerName)

                if velocityHandler then
                    velocityHandler:Destroy()
                end

                if gyroHandler then
                    gyroHandler:Destroy()
                end

                local humanoid = character:FindFirstChildWhichIsA("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end
        end

        if mfly1 then
            mfly1:Disconnect()
        end

        if mfly2 then
            mfly2:Disconnect()
        end
    end)
end

local function mobilefly(player, vfly)
    unmobilefly(player)
    FLYING = true

    local character = player.Character
    local root = getRoot(character)

    if character and root then
        local camera = workspace.CurrentCamera
        local v3none = Vector3.new()
        local v3zero = Vector3.new(0, 0, 0)
        local v3inf = Vector3.new(9e9, 9e9, 9e9)

        local controlModule = require(player.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 20

        mfly1 = player.CharacterAdded:Connect(function()
            unmobilefly(player)
            currentCharacter = player.Character
            mobilefly(player, vfly)
        end)

        mfly2 = RunService.RenderStepped:Connect(function()
            root = getRoot(player.Character)
            camera = workspace.CurrentCamera
            if player.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
                local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
                local VelocityHandler = root:FindFirstChild(velocityHandlerName)
                local GyroHandler = root:FindFirstChild(gyroHandlerName)

                if VelocityHandler and GyroHandler then
                    VelocityHandler.MaxForce = v3inf
                    GyroHandler.MaxTorque = v3inf

                    if not vfly and humanoid then
                        humanoid.PlatformStand = false
                    end

                    GyroHandler.CFrame = camera.CoordinateFrame
                    VelocityHandler.Velocity = v3none

                    local direction = controlModule:GetMoveVector()
                    if direction.X ~= 0 or direction.Z ~= 0 then
                        local moveVector = Vector3.new(direction.X, 0, direction.Z).unit
                        local rightVector = camera.CFrame.RightVector
                        local forwardVector = camera.CFrame.LookVector

                        local flyDirection = (rightVector * moveVector.X - forwardVector * moveVector.Z).unit

                        VelocityHandler.Velocity = flyDirection * (_G.flySpeed * 20)
                        RunService.RenderStepped:Wait()
                    end
                end
            end
        end)
    end
end

local function toggleFly(player, toggleValue)
    if toggleValue then
        mobilefly(player, true)
    else
        unmobilefly(player)
    end
end

-- Your loop structure
_G.loops = false

local function flyLoop()
    while wait(10) do
        if _G.loops then
            local player = game:GetService("Players").LocalPlayer
            if player and player.Character then
                mobilefly(player, true)
            end
        end
    end
end

local Toggle = Tabs.Main:AddToggle("FlyToggle", { Title = "Fly Toggle", Default = false })

Toggle:OnChanged(function()
    local player = game:GetService("Players").LocalPlayer
    _G.loops = Toggle.Value
    toggleFly(player, Toggle.Value)
end)

Options.FlyToggle:SetValue(false)

_G.flySpeed = 20  -- Default fly speed

local FlySpeedInput = Tabs.Main:AddInput("FlySpeedInput", {
    Title = "Fly Speed",
    Default = tostring(_G.flySpeed),
    Placeholder = "Enter fly speed",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        _G.flySpeed = tonumber(Value) or 20
        toggleFly(player, Toggle.Value)
    end
})

-- Start the loop
spawn(flyLoop)

Tabs.Main:AddParagraph({
        Title = "Manual",
        Content = " "
    })

Tabs.Main:AddButton({
        Title = "Respawn Button",
        Description = "",
        Callback = function()
        game:GetService("ReplicatedStorage").Events.Player.ChangePlayerMode:FireServer(true)
        end
    })
    
Tabs.Main:AddButton({
        Title = "Open Leaderboard (PC Mode)",
        Description = "",
        Callback = function()
           game:GetService("VirtualInputManager"):SendKeyEvent(true, "Tab", false, game)
        end
    })

-- AutoFarm

Tabs.AutoFarm:AddParagraph({
        Title = "Auto Farm",
        Content = "Recommend: Enable Quick Revive"
    })

local FarmMoney = false
local FarmTickets = false
local AFKFarm = false
local WorkspacePlayers = game:GetService("Workspace").Game.Players 

local GetDownedPlr = function()
    for i,v in pairs(WorkspacePlayers:GetChildren()) do
        if v:GetAttribute("Downed") then
            return v
        end
    end
end

local revive = function()
    local downedplr = GetDownedPlr()
    if downedplr ~= nil and downedplr:FindFirstChild('HumanoidRootPart') then
        task.spawn(function()
            while task.wait() do
                if game:GetService("Players").LocalPlayer.Character then
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild('HumanoidRootPart').CFrame = CFrame.new(downedplr:FindFirstChild('HumanoidRootPart').Position.X, downedplr:FindFirstChild('HumanoidRootPart').Position.Y + 3, downedplr:FindFirstChild('HumanoidRootPart').Position.Z)
                    task.wait()
                    game:GetService("ReplicatedStorage").Events.Character.Interact:FireServer("Revive", false, tostring(downedplr))
                    task.wait(4.5)
                    game:GetService("ReplicatedStorage").Events.Character.Interact:FireServer("Revive", true, tostring(downedplr))
                    game:GetService("ReplicatedStorage").Events.Character.Interact:FireServer("Revive", true, tostring(downedplr))
                    game:GetService("ReplicatedStorage").Events.Character.Interact:FireServer("Revive", true, tostring(downedplr))
                    break
                end
            end
        end)
    end
end

task.spawn(function()
    while task.wait() do
        if FarmMoney then
            if game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:GetAttribute("State") == "Downed" then
                game:GetService("ReplicatedStorage").Events.Player.ChangePlayerMode:FireServer(true)
                task.wait(3)
            else
                revive()
                task.wait(1)
            end
        end
        if FarmMoney == false and AFKFarm and game:GetService("Players").LocalPlayer.Character:FindFirstChild('HumanoidRootPart') ~= nil then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, -5000, 0))
            wait(3)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, 5000, 0))
            wait(3)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(5000, 0, 0))
            wait(3)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, 0, 5000))
        end
    end
end)

local Toggle = Tabs.AutoFarm:AddToggle("AutoFarmMoney", {Title = "Auto Farm Money", Default = false })

    Toggle:OnChanged(function(State)
    FarmMoney = State
    end)

local Toggle = Tabs.AutoFarm:AddToggle("AutoFarmTickets", {Title = "Auto Farm Tickets", Default = false })

    Toggle:OnChanged(function(State)
    FarmTickets = State
if FarmTickets then
         part = Instance.new("Part", workspace)
			part.Anchored = true
			part.CFrame = CFrame.new(100, 496, 100)
		end
		while task.wait(0.5) and FarmTickets do
			if not FarmTickets then
				break
			end
			local char = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
			local tickets = workspace.Game.Effects.Tickets
			local hrp = char:WaitForChild("HumanoidRootPart", 3)
			if hrp == nil then
				return
			end
			game:GetService("ReplicatedStorage").Events.Other.TicketsEvent:FireServer(hrp.Position)
			hrp.CFrame = CFrame.new(100, 500, 100)
			for i, v in next, tickets:GetDescendants() do
				if v.IsA(v, "BasePart") and v.Name == "HumanoidRootPart" then
					hrp.CFrame = CFrame.new(v.Position)
				end
			end
		end
    end)
    
local Toggle = Tabs.AutoFarm:AddToggle("AFKFarm", {Title = "AFK Farm", Default = false })

    Toggle:OnChanged(function(State)
    AFKFarm = State
    end)
    
Tabs.AutoFarm:AddParagraph({
        Title = "Teleports",
        Content = ""
    })

function tptoobjective()
local hrp = game:GetService("Players").LocalPlayer.Character.HumanoidRootPart
	if workspace.Game.Map.Parts:FindFirstChild("Objectives") then
		for i, v in next, workspace.Game.Map.Parts.Objectives:GetChildren() do
			if v.IsA(v, "Model") then
				hrp.CFrame = CFrame.new(v:FindFirstChildWhichIsA("BasePart").Position)
			end
		end
	end
end

Tabs.AutoFarm:AddButton({
        Title = "Teleport to Objective",
        Description = "",
        Callback = function()
        tptoobjective()
        end
    })
    
-- Nextbot

Tabs.Nextbot:AddParagraph({
        Title = "Anti Nextbot",
        Content = " "
    })

local SelectTeleportation = "Spawn"
local AntiNextbotDistance = 15

function AntiNextbot()
    if game.Workspace:FindFirstChild("Game") and game.Workspace.Game:FindFirstChild("Players") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
    
        local playerTeam = game.Workspace.Game.Players[game.Players.LocalPlayer.Name]:GetAttribute("Team")
        if playerTeam == "Nextbot" then
            return -- Exit the function if the player is on the "Nextbot" team
        end
    
        for i, v in pairs(game.Workspace.Game.Players:GetDescendants()) do
            if v:IsA("Model") and v:GetAttribute("Team") == "Nextbot" then
                local humanoidRootPart = v:FindFirstChild("HumanoidRootPart") or v:FindFirstChild("HRP")
                if humanoidRootPart then
                    local distance = (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - humanoidRootPart.Position).Magnitude
                    
                    if distance < AntiNextbotDistance then
                        if SelectTeleportation == "Spawn" then
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, -50000, 0))                         
                        elseif SelectTeleportation == "Players" then
                            local randomPlayer = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(randomPlayer.Character.Head.Position.X, randomPlayer.Character.Head.Position.Y, randomPlayer.Character.Head.Position.Z))
                        end
                    end
                end
            end
        end
    end
end

local AntiNextbotT = falae

local Toggle = Tabs.Nextbot:AddToggle("AntiNextbotToggle", {Title = "Anti Nextbot Toggle", Default = false })

    Toggle:OnChanged(function(Val)
    AntiNextbotT = Val
        
    while AntiNextbotT and wait(0.1) do
       AntiNextbot()
       end
    end)

local Dropdown = Tabs.Nextbot:AddDropdown("AntiBotTeleport", {
        Title = "Anti Nextbot Teleport Type",
        Values = {"Spawn", "Players"},
        Multi = false,
        Default = 1,
    })

    Dropdown:OnChanged(function(Value)
        SelectTeleportation = Value
    end)
    
 local Input = Tabs.Nextbot:AddInput("NextbotDistance", {
    Title = "Anti Nextbot Distance",
    Default = 15,
    Placeholder = "Number",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Only calls callback when you press enter
    Callback = function(Value)
        -- Convert the input value to a number
        AntiNextbotDistance = tonumber(Value) or 15 -- Default to 15 if the conversion fails
    end
})

local HitPart = false
local HitPartType = "HumanoidRootPart"
local DistanceToBring = 1000
local ShowHitPart = true

-- Distances Position
local DistanceX = 1000
local DistanceY = 1000
local DistanceZ = 1000

local Toggle = Tabs.Nextbot:AddToggle("TestV1", {Title = "Hitbox Nextbot", Default = false })

Toggle:OnChanged(function(bool)
HitPart = bool
    while HitPart and wait(0.1) do
        local player = game:GetService("Players").LocalPlayer
        local charpart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
        
        if charpart then
         local GamePlayers = workspace.Game.Players
			for i, v in pairs(GamePlayers:GetChildren()) do
		   	if not game.Players:FindFirstChild(v.Name) then
                local NextRootPart = v:FindFirstChild("HumanoidRootPart")
                
                local clone = nil
                for _, part in pairs(v:GetChildren()) do
                    if part:IsA("BasePart") and part:FindFirstChild("IsClone") then
                        clone = part
                        break
                    end
                end
                
                if NextRootPart then
                    local distance = (charpart.Position - NextRootPart.Position).Magnitude
                    local distanceX = math.abs(charpart.Position.X - NextRootPart.Position.X)
                    local distanceY = math.abs(charpart.Position.Y - NextRootPart.Position.Y)
                    local distanceZ = math.abs(charpart.Position.Z - NextRootPart.Position.Z)
                    
                    if distance <= DistanceToBring and distanceX <= DistanceX and distanceY <= DistanceY and distanceZ <= DistanceZ then
                        if not clone then
                            local BypassCFrameKick = NextRootPart:Clone()
                            BypassCFrameKick.Anchored = true
                            BypassCFrameKick.Name = HitPartType
                            
                            local isClone = Instance.new("BoolValue")
                            isClone.Name = "IsClone"
                            isClone.Parent = BypassCFrameKick
                            
                            BypassCFrameKick.Parent = v
                            clone = BypassCFrameKick
                        end
                        local offset = charpart.CFrame:VectorToWorldSpace(Vector3.new(0, 0, -6))
                        clone.Position = charpart.Position + offset
                        clone.Name = HitPartType
                            if ShowHitPart then
                             clone.Transparency = 0.7
                          else
                             clone.Transparency = 1
                             end
                        end
                    end
                end
            end
        end
    end
end)
    
Tabs.Nextbot:AddParagraph({
        Title = "Player Nextbot",
        Content = " "
    })

function KillAll()
    if game.Workspace:FindFirstChild("Game") and game.Workspace.Game:FindFirstChild("Players") and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") and not player.Character :GetAttribute("Team") == "Nextbot" then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = player.Character.HumanoidRootPart.CFrame * CFrame.new(0, 0, 2)
            end
        end
    end
end

local HitboxSize = 3
local HitboxTrans = 1

function KillAura()
    for i, v in pairs(game:GetService('Players'):GetPlayers()) do
        if v.Name ~= game:GetService('Players').LocalPlayer.Name then
            pcall(function()
                if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    v.Character.HumanoidRootPart.Size = Vector3.new(HitboxSize, HitboxSize, HitboxSize)
                    v.Character.HumanoidRootPart.Transparency = HitboxTrans
                    v.Character.HumanoidRootPart.CanCollide = false
                    v.Character.HumanoidRootPart.Massless = true
                end
            end)
        end
    end
end

function DisKillAura()
    for i, v in pairs(game:GetService('Players'):GetPlayers()) do
        if v.Name ~= game:GetService('Players').LocalPlayer.Name then
            pcall(function()
                if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    v.Character.HumanoidRootPart.Size = Vector3.new(3, 5, 3) -- Reset to correct default size
                    v.Character.HumanoidRootPart.Transparency = 1 -- Reset to default transparency
                    v.Character.HumanoidRootPart.CanCollide = false
                end
            end)
        end
    end
end

local HitboxToggle = false
local KillAllT = false

local KillAllToggle = Tabs.Nextbot:AddToggle("KillAll", {Title = "Kill All", Default = false })

KillAllToggle:OnChanged(function(Value)
    KillAllT = Value
    
    while KillAllT and wait(0.1) do
        KillAura()
    end
end)

local HitboxToggleControl = Tabs.Nextbot:AddToggle("HitboxPlayers", {Title = "Hitbox Players", Default = false })

HitboxToggleControl:OnChanged(function(Value)
    HitboxToggle = Value
    
    if not HitboxToggle then
        DisKillAura()
    end
    
    while HitboxToggle and wait(0.1) do
     if not HitboxToggle then
        DisKillAura()
    end
         KillAura()
      end
end)

local HitboxSizeInput = Tabs.Nextbot:AddInput("HitboxSize", {
    Title = "Hitbox Size",
    Default = "3",
    Placeholder = "Number",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Only calls callback when you press enter
    Callback = function(Value)
        HitboxSize = tonumber(Value) or 3
    end
})

local HitboxTransInput = Tabs.Nextbot:AddInput("HitboxTrans", {
    Title = "Hitbox Transparency",
    Default = "1",
    Placeholder = "Number",
    Numeric = false, -- Only allows numbers
    Finished = false, -- Only calls callback when you press enter
    Callback = function(Value)
        HitboxTrans = tonumber(Value) or 1
    end
})

-- Misc

Tabs.Misc:AddParagraph({
        Title = "Adjustments",
        Content = " "
    })

local TSpeed = 1500
local TJump = 3
local SavedSpeed = 1500
local SavedJump = 3

local Input = Tabs.Misc:AddInput("PlayerSpeed", {
        Title = "Player Speed",
        Default = "1500",
        Placeholder = "Speed Number",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            TSpeed = tonumber(Value) or 1500
            SavedSpeed = tonumber(Value) or 1500
        end
    })
    
local Input = Tabs.Misc:AddInput("PlayerJump", {
        Title = "Player Jump",
        Default = "3",
        Placeholder = "Speed Number",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            TJump = tonumber(Value) or 3
            SavedJump = tonumber(Value) or 3
        end
    })

local RunUpdater = true

spawn(function()
    while RunUpdater and wait(2) do
        for _, v in ipairs(getgc(true)) do
            if type(v) == 'table' and rawget(v, "JumpHeight") then
                rawset(v, "Speed", TSpeed)
                rawset(v, "JumpHeight", TJump)
          --  break 
            end
        end
    end
end)

Tabs.Misc:AddParagraph({
        Title = "Emote Mods",
        Content = " "
    })

Tabs.Misc:AddParagraph({
        Title = "Sprint Emote Dash",
        Content = ""
    })

local FakeEmoteDownDash = false
local FakeEmoteDownDash2 = false
local SelectedEmoteSpeed = 2000

local Toggle = Tabs.Misc:AddToggle("EmoteD1", {Title = "Sprint Emote/Down Dash", Default = false })

    Toggle:OnChanged(function(State)
        FakeEmoteDownDash = State
      if not FakeEmoteDownDash then
      TSpeed = SavedSpeed
      end
    
    repeat
      wait()
       if FakeEmoteDownDash then
       if game.Workspace:FindFirstChild("Game") and game.Workspace.Game:FindFirstChild("Players") and game.Workspace.Game.Players:FindFirstChild(game:GetService("Players").LocalPlayer.Name) then
			local char = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
			if char and char:GetAttribute("State") == "Emoting" or char:GetAttribute("State") == "EmotingAir" or char:GetAttribute("State") == "EmotingSlide" or char:GetAttribute("State") == "EmotingSlideAir" then
				TSpeed = SelectedEmoteSpeed
			else
	            TSpeed = SavedSpeed
			end
		end
     end
		until FakeEmoteDownDash == false
    end)

local Toggle = Tabs.Misc:AddToggle("EmoteD2", {Title = "Sprint Emote Dash (No Crouching)", Default = false })

    Toggle:OnChanged(function(State)
        FakeEmoteDownDash2 = State
      if not FakeEmoteDownDash2 then
      TSpeed = SavedSpeed
      end
    
    repeat
      wait()
       if FakeEmoteDownDash2 then
           if game.Workspace:FindFirstChild("Game") and game.Workspace.Game:FindFirstChild("Players") and game.Workspace.Game.Players:FindFirstChild(game:GetService("Players").LocalPlayer.Name) then
			local char = game:GetService("Players").LocalPlayer.Character or game:GetService("Players").LocalPlayer.CharacterAdded:Wait()
			if char and char:GetAttribute("State") == "Emoting" or char:GetAttribute("State") == "EmotingAir" then
				TSpeed = SelectedEmoteSpeed
			else
                 TSpeed = SavedSpeed
			end
		end
     end
		until FakeEmoteDownDash2 == false
    end)

  local Dropdown = Tabs.Misc:AddDropdown("EmoteSpeed", {
        Title = "Emote Dash Speed",
        Values = {1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 12500, 15000, 20000, 30000, 40000, 50000},
        Multi = false,
        Default = 2,
    })

    Dropdown:OnChanged(function(Value)
        SelectedEmoteSpeed = Value
    end)

Tabs.Misc:AddParagraph({
        Title = "Fun Emotes",
        Content = "Mobile/Tablet only"
    })
    
local BreakEmoteTG = false
local BindableButtonToggle = false
local SelectedEmoteSlot = "1"

function BreakEmote()
if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:GetAttribute("Emoting") == true then
      game.Players.LocalPlayer.Character.Humanoid.Sit = true
   end
end

local Toggle = Tabs.Misc:AddToggle("RagdollEmote", {Title = "Ragdoll Emote", Default = false})

Toggle:OnChanged(function(StateBruh)
    BreakEmoteTG = StateBruh
 
   while BreakEmoteTG and wait(0.1) do
      BreakEmote()
   end
end)

Tabs.Misc:AddParagraph({
        Title = "Adjusting Bounce",
        Content = "(Only works in trimping)\nWarning: Do not Put too high like 1000-2500"
    })
    
local BounceToggle = false
local AdjustedBounce = 80

local Toggle = Tabs.Misc:AddToggle("AdjustBounce", {Title = "Player Bounce Toggle", Default = false })

    Toggle:OnChanged(function(State)
        BounceToggle = State
     
  while BounceToggle and wait(0.1) do
  spawn(function()
    local player = game.Players.LocalPlayer
    local humanoid = player.Character:FindFirstChild("Humanoid")
   if not  BounceToggle and humanoid then
       humanoid.WalkSpeed = 0
     end
     
    if player.Character and humanoid then
          humanoid.WalkSpeed = AdjustedBounce
        if player.Character:GetAttribute("State") == "Default" or player.Character:GetAttribute("State") == "Downed" or player.Character:GetAttribute("State") == "Emoting" or player.Character:GetAttribute("State") == "EmotingAir" or not BounceToggle then
          humanoid.WalkSpeed = 0
            end
        end
    end)
end
    end)

local Input = Tabs.Misc:AddInput("PlayerBounce", {
        Title = "Player Bounce",
        Default = "80",
        Placeholder = "Bounce Number",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            AdjustedBounce = tonumber(Value) or 80
        end
    })

Tabs.Misc:AddParagraph({
        Title = "Bhop",
        Content = " "
    })
    
local BHopKey = false
    
local Keybind = Tabs.Misc:AddKeybind("KeyBHOP", {
        Title = "Keybind to BHOP",
        Mode = "Toggle", -- Always, Toggle, Hold
        Default = "B",
        
        Callback = function(Bool)
        BHopKey = Bool
          spawn(function()
            while true and wait(0.1) do
                if BHopKey then
               local humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
--        if humanoid and humanoid.FloorMaterial ~= Enum.Material.Air and humanoid then
--            humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
--            end
                 setfflag("MaxAltitudePDStickHipHeightPercent", "-24")
             else
                 setfflag("MaxAltitudePDStickHipHeightPercent", "10")
                end
           end
       end)

  spawn(function()
     while true and wait(0.1) do
      if BHopKey then
           local humanoid = game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid and humanoid.FloorMaterial ~= Enum.Material.Air and humanoid then
             game.Players.LocalPlayer.Character.Communicator:InvokeServer("Jump")
             humanoid.Jump = true
             end
           end
        end
     end)
   end,

        ChangedCallback = function(New)
            print("Keybind changed!", New)
        end
    })
    
Tabs.Misc:AddParagraph({
        Title = "Mobile/Tablet Version",
        Content = ""
    })
 
local BHop = false
local delay = 1

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")

local BHop2 = false

local function createtoggle()
    -- Create ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = game.CoreGui
    screenGui.Name = "BHopToggle"
    screenGui.ResetOnSpawn = false
    
    -- Create Frame
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 200, 0, 50)
    frame.Position = UDim2.new(1, -200, 0.5, -40)
    frame.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    frame.BackgroundTransparency = 1
    frame.Parent = screenGui

    -- Make frame draggable
    frame.Active = true
    frame.Draggable = true

    -- Create Toggle Button
    local toggleButton = Instance.new("TextButton")
    toggleButton.Size = UDim2.new(1, 0, 1, 0)
    toggleButton.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
    toggleButton.Text = "Auto Jump: OFF"
    toggleButton.Parent = frame

    -- Toggle Button Functionality
    toggleButton.MouseButton1Click:Connect(function()
        BHop2 = not BHop2
        toggleButton.Text = BHop2 and "Auto Jump: ON" or "Auto Jump: OFF"
    end)
    
    MakeDraggable(toggleButton, frame)
end


-- Auto-Jump
spawn(function()
while true and wait(0.1) do
    if BHop2 then
   setfflag("MaxAltitudePDStickHipHeightPercent", "-24") 
--        local humanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
--        if humanoid and humanoid.FloorMaterial ~= Enum.Material.Air and humanoid then
  --          humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
--            end
      else
      setfflag("MaxAltitudePDStickHipHeightPercent", "10")
       end
    end
end)

local Players = game:GetService("Players")

local function onPlayerRemoving()
setfflag("MaxAltitudePDStickHipHeightPercent", "10")
end

Players.PlayerRemoving:Connect(onPlayerRemoving)

function destroytoggle()
local target = game.CoreGui

if target:FindFirstChild("BHopToggle") then
target.BHopToggle:Destroy()
end
end

local Toggle = Tabs.Misc:AddToggle("BHOPToggle", {Title = "BHOP Toggle", Default = false })

    Toggle:OnChanged(function(State)
 BHop = State
if BHop then
createtoggle()
else
destroytoggle()
end
end)

Tabs.Misc:AddParagraph({
        Title = "Modified Client",
        Content = " "
    })

local Lighting = game:GetService("Lighting")
local normalambient = Lighting.Ambient
local normalcolorshift = Lighting.ColorShift_Bottom
local normalcolorshift2 = Lighting.ColorShift_Top
local normalfog1 = Lighting.FogEnd
local normalfog2 = Lighting.FogStart
local normalGlobalshadow = Lighting.GlobalShadows
local normalclock = Lighting.ClockTime
local normalbrightness = Lighting.Brightness

function fb()
            Lighting.Ambient = Color3.new(1, 1, 1)
            Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
            Lighting.ColorShift_Top = Color3.new(1, 1, 1)
            Lighting.FogEnd = 100000
            Lighting.FogStart = 0
            Lighting.GlobalShadows = false
            Lighting.ClockTime = 14
            Lighting.Brightness = 2
end

function nofb()
            Lighting.Ambient = normalambient
            Lighting.ColorShift_Bottom = normalcolorshift
            Lighting.ColorShift_Top = normalcolorshift2
            Lighting.FogEnd = normalfog1
            Lighting.FogStart = normalfog2
            Lighting.GlobalShadows = normalGlobalshadow
            Lighting.ClockTime = normalclock
            Lighting.Brightness = normalbrightness
end
 
  local Fullbrighting = false
 
 local Toggle = Tabs.Misc:AddToggle("FullBright", {Title = "Full Bright", Default = false })

    Toggle:OnChanged(function(StateFB)
 Fullbrighting = StateFB
     if Fullbrighting then
          fb()
       else
          nofb()
       end
end)

Options.FullBright:SetValue(false)

Tabs.Misc:AddButton({
        Title = "Accurate Low Quality",
        Description = "",
        Callback = function()
        -- made by guesttester_1 (pls credit to me)
-- i forgot to add remove textures script

setfpscap(900) -- normal fps cap for other executors

setfflag("TaskSchedulerTargetFps", "900") -- for setfpscap unc missing or unsupported for executors

local function removeWater()
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj:IsA("Terrain") then
            obj.WaterTransparency = 1
            obj.WaterWaveSize = 0
            obj.WaterWaveSpeed = 0
            obj.WaterReflectance = 0
        end
    end
end

local function removeReflections()
    local lighting = game:GetService("Lighting")
    lighting.EnvironmentSpecularScale = 0
    lighting.EnvironmentDiffuseScale = 0
end

local function removeEffects()
    for _, effect in pairs(workspace:GetDescendants()) do
        if effect:IsA("ParticleEmitter") or effect:IsA("Smoke") or effect:IsA("Fire") or effect:IsA("Sparkles") then
            effect.Enabled = false
        end
    end
end

local function removeGrass()
setfflag("FRMMinGrassDistance", "0")
setfflag("FRMMaxGrassDistance", "0")
setfflag("RenderGrassDetailStrands", "0")
end

local function removeExplosions()
    for _, explosion in pairs(workspace:GetDescendants()) do
        if explosion:IsA("Explosion") then
            explosion:Destroy()
        end
    end
end

local function setLowShadows()
    game.Lighting.Technology = Enum.Technology.Voxel
    game.Lighting.GlobalShadows = false
end

local function setLowQuality()
    settings().Rendering.QualityLevel = Enum.QualityLevel.Level01
end

local function setFlagsGraphics()
setfflag("DebugGraphicsDisableDirect3D11", "true")
setfflag("DebugGraphicsPreferVulkan", "true")
setfflag("DebugTextureManagerSkipMips", "2")
setfflag("TaskSchedulerLimitTargetFpsTo2402", "false")
setfflag("TaskSchedulerTargetFps", "900")
end

local function reduceLag()
    removeWater()
    removeReflections()
--    removeEffects()
--    removeExplosions()
    setLowShadows()
    setLowQuality()
    setFlagsGraphics()
    removeGrass()
end

reduceLag()

workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Terrain") then
      wait(0.5)
        reduceLag()
     end
end)

        end
 })

-- Settings

Tabs.Settings:AddParagraph({
        Title = "Save Config",
        Content = " "
    })

Tabs.Settings:AddButton({
        Title = "Remove FPS Counter",
        Description = "",
        Callback = function()
            fpsCounter:Destroy()
        end
    })

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:SetIgnoreIndexes({})

-- Save Folder
InterfaceManager:SetFolder("UnknownHubXUniversal")
SaveManager:SetFolder("UnknownHubXUniversal/Evade")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- Auto Load Configuration
SaveManager:LoadAutoloadConfig()
