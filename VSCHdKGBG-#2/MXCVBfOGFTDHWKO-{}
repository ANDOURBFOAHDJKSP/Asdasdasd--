local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Unknownproootest/Unknown-TreasureQuest/Alt/Test_FixMinimizeKey"))()

local openshit = Instance.new("ScreenGui")
local mainopen = Instance.new("TextButton")
local mainopens = Instance.new("UICorner")
local loki = Instance.new("ImageLabel")
local posto = Instance.new("UIStroke")

openshit.Name = "openshit"
openshit.Parent = game:GetService("Players").LocalPlayer:WaitForChild("PlayerGui")
openshit.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
openshit.ResetOnSpawn = false

mainopen.Name = "mainopen"
mainopen.Parent = openshit
mainopen.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
mainopen.Position = UDim2.new(0.101969875, 0, 0.110441767, 0)
mainopen.Size = UDim2.new(0, 64, 0, 42)
mainopen.Text = ""
mainopen.Visible = true
mainopens.Parent = mainopen
 
loki.Name = "loki"
loki.Parent = mainopen
loki.BackgroundColor3 = Color3.fromRGB(224,224,224)
loki.BackgroundTransparency = 1.000
loki.Position = UDim2.new(-0.0529999994, 0, -0.244000003, 0)
loki.Size = UDim2.new(0, 69, 0, 62)
loki.Image = "rbxassetid://17339439921"
 
posto.Name = "posto"
posto.Parent = mainopen
posto.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
posto.Color = Color3.fromRGB(224,224,224)
posto.LineJoinMode = Enum.LineJoinMode.Round
posto.Thickness = 1
posto.Transparency = 0
posto.Enabled = true
posto.Archivable = true
 
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
 
local function MakeDraggable(topbarobject, object)
    local Dragging = nil
    local DragInput = nil
    local DragStart = nil
    local StartPosition = nil
    
    local function Update(input)
        local Delta = input.Position - DragStart
        local pos = UDim2.new(StartPosition.X.Scale, StartPosition.X.Offset + Delta.X, StartPosition.Y.Scale, StartPosition.Y.Offset + Delta.Y)
        local Tween = TweenService:Create(object, TweenInfo.new(0.15), {
            Position = pos
        })
        Tween:Play()
    end
    
    topbarobject.InputBegan:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                Dragging = true
                DragStart = input.Position
                StartPosition = object.Position
                
                input.Changed:Connect(
                    function()
                        if input.UserInputState == Enum.UserInputState.End then
                            Dragging = false
                        end
                    end
                )
            end
        end
    )
    
    topbarobject.InputChanged:Connect(
        function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
                DragInput = input
            end
        end
    )
    
    UserInputService.InputChanged:Connect(
        function(input)
            if input == DragInput and Dragging then
                Update(input)
            end
        end
    )
end

MakeDraggable(mainopen, mainopen) -- Making the button draggable

local RunService = game:GetService("RunService")
local fpsCounter = Instance.new("ScreenGui")
fpsCounter.Parent = game.CoreGui
fpsCounter.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
fpsCounter.ResetOnSpawn = false

local label = Instance.new("TextLabel")
label.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
label.BackgroundTransparency = 1.000
label.TextColor3 = Color3.fromRGB(255, 255, 255)
label.Font = Enum.Font.GothamBlack
label.Size = UDim2.new(0, 150, 0, 70)
label.Position = UDim2.new(0, 200, 0, 10)
label.Text = "FPS: 0\nTime Played: 0h 0m 0s"
label.TextSize = 10
label.Parent = fpsCounter

local startTime = tick()
local lastUpdateTime = tick()
local frameCount = 0

RunService.RenderStepped:Connect(function()
    local currentTime = tick()
    local deltaTime = currentTime - lastUpdateTime
    frameCount = frameCount + 1
    
    if frameCount == 1 and untilloaded == true then
       game:GetService("Players").LocalPlayer:Kick("Device Saver: CRASH DETECTED")
    end

    if deltaTime >= 1 then
        local fps = math.round(frameCount / deltaTime)
        local elapsedTime = currentTime - startTime

        local hours = math.floor(elapsedTime / 3600)
        local minutes = math.floor((elapsedTime % 3600) / 60)
        local seconds = math.floor(elapsedTime % 60)

        label.Text = "FPS: " .. fps .. "\nClient Timer: " .. hours .. "h " .. minutes .. "m " .. seconds .. "s"

        lastUpdateTime = currentTime
        frameCount = 0
    end
end)

if not require then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: require(path) | PLEASE TRY OTHER EXECUTORS")
else
print("Supported require()")
end

if not firetouchinterest  then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: firetouchinterest() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported firetouchinterest()")
end

if not setfpscap or setfpscap(500) then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: setfpscap() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported setfpscap()")
end

if not setfflag then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: setfflag() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported setfflag()")
end

if not hookmetamethod then
    return game:GetService("Players").LocalPlayer:Kick("UNC RESTRICTION MISSING: hookmetamethod() | PLEASE TRY OTHER EXECUTORS")
else
print("Supported hookmetamethod()")
end

if game.Players then
print("Advance Api")
else
print("Common Api")
end

local SizeGuiX = 580
local SizeGuiZ = 460

local Window = Fluent:CreateWindow({
    Title = "Unknown Hub X MM2",
    SubTitle = "V1 (BETA) Made by Unknownproooolucky discord.gg/d2a3KkTD6r",
    TabWidth = 160,
    Size = UDim2.fromOffset(SizeGuiX, SizeGuiZ),
    Acrylic = false, -- The blur may be detectable, setting this to false disables blur entirely
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

mainopen.MouseButton1Click:Connect(function()
   Window:Minimize()
end)

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    AutoFarm = Window:AddTab({ Title = "Auto Farms", Icon = "" }),
    Combat = Window:AddTab({ Title = "Combat", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" }),
    Players = Window:AddTab({ Title = "Characters", Icon = "" }),
    Trolls = Window:AddTab({ Title = "Trolls", Icon = "" }),    
    Settings = Window:AddTab({ Title = "Save Config", Icon = "rbxassetid://7734052335" })
}

local Options = Fluent.Options

-- Source Function

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local StarterGui = game:GetService("StarterGui")
local LocalPlayer = Players.LocalPlayer
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local players = game:GetService("Players")
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local Remotes = game:GetService("ReplicatedStorage").Remotes
local Gameplay = Remotes.Gameplay
local RunService = game:GetService("RunService")
local N=game:GetService("VirtualInputManager")

function getPlayer()
    while not game:GetService('Players').LocalPlayer do
        RunService.RenderStepped:Wait()
    end
    while not game:GetService('Players').LocalPlayer.Character do
        RunService.RenderStepped:Wait()
    end
    while not game:GetService('Players').LocalPlayer.Character:FindFirstChild("HumanoidRootPart") do
        RunService.RenderStepped:Wait()
    end
    while not game:GetService('Players').LocalPlayer.Character:FindFirstChild("Humanoid") do
        RunService.RenderStepped:Wait()
    end

    local player = game:GetService('Players').LocalPlayer
    local cha = game:GetService('Players').LocalPlayer.Character
    local plr = game:GetService('Players').LocalPlayer.Character.HumanoidRootPart
    local hum = game:GetService('Players').LocalPlayer.Character.Humanoid
    return player, cha, plr, hum
end

local mt = getrawmetatable(game);
local old = {};
for i, v in next, mt do old[i] = v end;

setreadonly(mt,false)

function IsAlive(Player)
    for i, v in pairs(roles) do
        if Player.Name == i then
            if not v.Killed and not v.Dead then
                return true
            else
                return false
            end
		end
	end
end

function CreateHighlight()
    for i, v in pairs(Players:GetChildren()) do
        if v ~= LocalPlayer and v.Character and not v.Character:FindFirstChild("Highlight") then
            Instance.new("Highlight", v.Character)
        end
    end
end

function UpdateHighlights()
    for _, v in pairs(Players:GetChildren()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Highlight") then
            Highlight = v.Character:FindFirstChild("Highlight")
            if v.Name == Sheriff and IsAlive(v) and sheriffchams == true then
                Highlight.FillColor = Color3.fromRGB(0, 0, 225)
            elseif v.Name == Murder and IsAlive(v) and murdchams == true then
                Highlight.FillColor = Color3.fromRGB(225, 0, 0)
            elseif v.Name == Hero and IsAlive(v) and not IsAlive(game.Players[Sheriff]) and sheriffchams == true then
                Highlight.FillColor = Color3.fromRGB(255, 250, 0)
            else
                Highlight.FillColor = Color3.fromRGB(0, 225, 0)
            end
		end
	end
end	

roleupdater = true
if roleupdater then
spawn(function()
while roleupdater do
    function roleupdaterfix()
    roles = ReplicatedStorage:FindFirstChild("GetPlayerData", true):InvokeServer()
    for i, v in pairs(roles) do
        if v.Role == "Murderer" then
            Murderer = i
            Murder = i
        elseif v.Role == 'Sheriff' then
            Sheriff = i
        elseif v.Role == 'Hero' then
            Hero = i
        end
    end
    wait(1)
end
wait()
pcall(roleupdaterfix)
end
end)
end

function refreshchams()
    for i,v in pairs(workspace:GetDescendants()) do
        if v.Name == "Highlight" then
            v:Destroy()
        end
    end
    roleupdaterfix()
end

function SpawnEmotes()
    local Remote = game.ReplicatedStorage.Remotes.Extras.GetPlayerData:InvokeServer("GetData")
    local Client = Players.LocalPlayer
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local Modules = ReplicatedStorage.Modules
    local EmoteModule = Modules.EmoteModule
    local Emotes = Client.PlayerGui.MainGUI.Game:FindFirstChild("Emotes")
    local EmoteList = {"headless","zombie","zen","ninja","floss","dab","sit", "spraypaint"}
    require(EmoteModule).GeneratePage(EmoteList,Emotes,'Your Emotes')
end

function EquipToolKnife()
    for _,obj in next, game.Players.LocalPlayer.Backpack:GetChildren() do
        if obj.Name == "Knife" then
            local equip = game.Players.LocalPlayer.Backpack:FindFirstChild("Knife")
            equip.Parent = game.Players.LocalPlayer.Character
        end
    end
end

function EquipToolGun()
    for _,obj in next, game.Players.LocalPlayer.Backpack:GetChildren() do
        if obj.Name == "Gun" then
            local equip = game.Players.LocalPlayer.Backpack:FindFirstChild("Gun") 
            equip.Parent = game.Players.LocalPlayer.Character
        end
    end
end

spawn(function()
while wait(1) do
function GetMap()
    for i, v in pairs(Workspace:GetChildren()) do
        if v:FindFirstChild("Spawns") or v:FindFirstChild("Base") then
            return v
        end
    end
end
end
wait()
pcall(GetMap)
end)

function Stab()
    game:GetService("Players").LocalPlayer.Character.Knife.Stab:FireServer("Down")
end

function SprayPaintNotif()
    if doeshavespraypaint ~= true then
        sendnotification("You dont have Spray Paint, You will need it to be able to use this.")
    end
end

function SearchforGun()
    GunHolderName = nil
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            local Gun = player.Backpack:FindFirstChild("Gun") or player.Character:FindFirstChild("Gun")
            if Gun then
                GunPath = Gun
            end
        end
    end
end

local function ForceJump()
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = 50
    game.Players.LocalPlayer.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
end

local function CheckForKKey()
    if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
        ForceJump()
    end
end

local function TwoLifes()
local Character = game.Players.LocalPlayer.Character
local Humanoid = Character.Humanoid
    if Character then
        if Humanoid then
            Humanoid.Name = "1"
        end
        local HumanoidClone = Character["1"]:Clone()
        HumanoidClone.Parent = Character
        HumanoidClone.Name = "Humanoid"; wait(0.1)
        Character["1"]:Destroy()
        Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
        Character.Animate.Disabled = true; wait(0.1)
        Character.Animate.Disabled = false
    end
end

--------------------------------------------------------------------------------------EXTRA----------------------------------------------------------------------------------------
local VirtualUser = game:service'VirtualUser'
game:service'Players'.LocalPlayer.Idled:connect(function()
    if antiafk == true then
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end
end)
wait()

game.Players.LocalPlayer.CharacterAdded:Connect(function(Player)
    if emotesondeath == true then
        SpawnEmotes()
    end
end)

workspace.ChildAdded:Connect(function(p)
    if r3thremovedecals == true then
        if p.Name == "Spray" then
            p:Destroy()
            wait()
        end
    end
    wait()
end)

-- Main
    
Tabs.Main:AddParagraph({
        Title = "ESP Features",
        Content = "(Highlight)"
    })
    
local Toggle = Tabs.Main:AddToggle("InnocentChams", {Title = "Esp Innnocent", Default = false })

    Toggle:OnChanged(function(playerchams)
    
        playerchamsloop = playerchams
    while playerchamsloop do
        function playerchamsloopfix()
        CreateHighlight()
        UpdateHighlights()
        wait(0.5)
    end
    wait()
    pcall(playerchamsloopfix)
    end
    refreshchams()
    end)
    
local Toggle = Tabs.Main:AddToggle("SheriffChams", {Title = "Esp Sheriff", Default = false })

    Toggle:OnChanged(function(sheriffchamstoggle)
      if sheriffchamstoggle == true then
        sheriffchams = true
        wait()
    end
    if sheriffchamstoggle == false then
        sheriffchams = false
        wait()
    end
    end)

local Toggle = Tabs.Main:AddToggle("MurderChams", {Title = "Esp Murderer", Default = false })

    Toggle:OnChanged(function(murdererchams)
        if murdererchams == true then
        murdchams = true
        wait()
    end
    if murdererchams == false then
        murdchams = false
        wait()
    end
    end)
    
local gunesp = false
local Toggle = Tabs.Main:AddToggle("GunChams", {Title = "Esp Gun", Default = false })

Toggle:OnChanged(function(gunchams)
gunesp = gunchams

while gunesp and wait(0.1) do
if gunesp then
local Map = GetMap()
		    if Map then
                local GunDrop = Map:FindFirstChild("GunDrop")
                if GunDrop then
                    local Gui = LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
                    local GunESP = Gui:FindFirstChild("GunESP")
                    if GunESP then
                        GunESP.Adornee = GunDrop
                    else
                        -- Had to do this due to Highlight bugs
                        local Highlight = Instance.new("Highlight", Gui)
                        Highlight.Name = "GunESP"
                        Highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
                        Highlight.Adornee = GunDrop
                        Highlight.FillColor = Color3.fromRGB(255, 255, 0)
                        Highlight.FillTransparency = 0.2
                    end
                end
            end
        else
            local Gui = LocalPlayer:FindFirstChildWhichIsA("PlayerGui")
            local GunESP = Gui:FindFirstChild("GunESP")
            if GunESP then
                GunESP:Destroy()
            end
        end
    end
end)

function IndicateRoles()
if not Murderer == game.Players.LocalPlayer.Name and not Sheriff == game.Players.LocalPlayer.Name then
   Fluent:Notify({
        Title = "Indicated Role: Innocent!",
        Content = "",
        SubContent = "", 
        Duration = 13
    })
elseif Sheriff == game.Players.LocalPlayer.Name then
   Fluent:Notify({
        Title = "Indicated Role: Sheriff!",
        Content = "",
        SubContent = "",
        Duration = 13
    })
  elseif Murderer == game.Players.LocalPlayer.Name then
      Fluent:Notify({
        Title = "Indicated Role: Murderer!",
        Content = "",
        SubContent = "", 
        Duration = 13
    })
   end
end

local IndicateTheRoles = false
    
Tabs.Main:AddParagraph({
        Title = "Blurt Roles",
        Content = " "
    })
    
Tabs.Main:AddButton({
        Title = "Expose Sheriff",
        Description = "",
        Callback = function()
   local players = game.Players:GetPlayers()
 
for i,v in ipairs(players) do
  if v.Backpack:FindFirstChild("Gun") or (v.Character and v.Character:FindFirstChild("Gun")) then
  game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(v.Name .. " is the Sheriff!", "normalchat")
break
end
end
        end
    })
    
Tabs.Main:AddButton({
        Title = "Expose Murderer",
        Description = "",
        Callback = function()
   local players = game.Players:GetPlayers()
 
for i,v in ipairs(players) do
  if v.Backpack:FindFirstChild("Knife") or (v.Character and v.Character:FindFirstChild("Knife")) then
  game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(v.Name .. " is the Murderer!", "normalchat")
break
end
end
        end
    })
    
Tabs.Main:AddParagraph({
        Title = "Teleports",
        Content = " "
    })

Tabs.Main:AddButton({
        Title = "Teleport to Lobby",
        Description = "",
        Callback = function()
game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Lobby.Spawns:FindFirstChild("SpawnLocation").Position) * CFrame.new(0,2.5,0) 
        end
    })
    
Tabs.Main:AddButton({
        Title = "Teleport to Map",
        Description = "",
        Callback = function()
for i,v in pairs (workspace:GetDescendants()) do
        if v.Name == "Spawn" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0,2.5,0)
        elseif v.Name == "PlayerSpawn" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0,2.5,0)
        end
    end        
        end
    })
    
Tabs.Main:AddButton({
        Title = "Teleport to Above Map",
        Description = "",
        Callback = function()
for i,v in pairs (workspace:GetDescendants()) do
        if v.Name == "Spawn" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0,200,0)
        elseif v.Name == "PlayerSpawn" then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Position) * CFrame.new(0,200,0)
        end
    end
        end
    })
    
Tabs.Main:AddButton({
        Title = "Teleport to Sheriff",
        Description = "",
        Callback = function()
    tptoplayer = players:FindFirstChild(Sheriff)
    LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tptoplayer.Character:WaitForChild("HumanoidRootPart").Position)        
        end
    })
    
Tabs.Main:AddButton({
        Title = "Teleport to Murderer",
        Description = "",
        Callback = function()
   tptoplayer = players:FindFirstChild(Murder)
    LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tptoplayer.Character:WaitForChild("HumanoidRootPart").Position)
        end
    })

-- Auto Farm

local TweenSpeed = 25

function Tween(table, callback)
    local player, cha, plr, hum = getPlayer()
    local target, targetPart, newCFrame = table.target, table.targetPart, table.newCFrame

    local tic_k = tick();

    local distance = (targetPart.Position - plr.Position).Magnitude

    local movementSpeed = TweenSpeed
    
    local duration = distance / movementSpeed

    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tweenCFrame

    if newCFrame then
        tweenCFrame = CFrame.new(targetPart.Position) * newCFrame
    else
        tweenCFrame = CFrame.new(targetPart.Position)
    end

    local tween = TweenService:Create(plr, tweenInfo, {
        CFrame = tweenCFrame
    })
    tween:Play()
    if callback then
        tween.Completed:Wait()
        print("Completed")
        callback()
    end
end    

function getNearestCoins()
    local Map = GetMap() or Workspace:FindFirstChild("Barn")
    local CoinContainer = Map:FindFirstChild("CoinContainer") or Map:FindFirstChild("CoinsAreas")
    local MinDistance = math.huge
    local Coin = nil
    
if not Map and not CoinContainer then
  return
end

    if CoinContainer and LocalPlayer and LocalPlayer.Character then
        for _, v in pairs(CoinContainer:GetChildren()) do
            if v.Name == "Coin_Server" and v:FindFirstChildWhichIsA("TouchTransmitter") and v:FindFirstChild("CoinVisual") then
                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                if Distance < MinDistance then
                    Coin = v
                    MinDistance = Distance
                end
            end
        end
    end

    return Coin
end

function getRandomCoins()
    local Map = GetMap() or Workspace:FindFirstChild("Barn")
    local CoinContainer = Map:FindFirstChild("CoinContainer") or Map:FindFirstChild("CoinsAreas")
    local MinDistance = math.huge
    local Coin = nil
    
 if not Map and not CoinContainer then
  return
end

    if CoinContainer and LocalPlayer and LocalPlayer.Character then
        for _, v in pairs(CoinContainer:GetChildren()) do
            if v.Name == "Coin_Server" and v:FindFirstChildWhichIsA("TouchTransmitter") and v:FindFirstChild("CoinVisual") then
                 Coin = v
            end
        end
    end

    return Coin
end

function CoinsAura()
    local Map = GetMap() or Workspace:FindFirstChild("Barn")
    local CoinContainer = Map:FindFirstChild("CoinContainer") or Map:FindFirstChild("CoinsAreas")
    local MinDistance = 15
    local Coin = nil
    
if not Map and not CoinContainer then
  return
end

    if CoinContainer and LocalPlayer and LocalPlayer.Character then
        for _, v in pairs(CoinContainer:GetChildren()) do
            if v.Name == "Coin_Server" and v:FindFirstChildWhichIsA("TouchTransmitter") and v:FindFirstChild("CoinVisual") then
                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                if Distance < MinDistance then
                    Coin = v
                    MinDistance = Distance
                end
            end
        end
    end
    
if Coin then
        firetouchinterest(LocalPlayer.Character.HumanoidRootPart, Coin, 1)
        firetouchinterest(LocalPlayer.Character.HumanoidRootPart, Coin, 0)
        Coin.Size = Vector3.new(15, 5, 15)
        Coin.CoinVisual.Size = Vector3.new(15, 1, 15)
        Coin.Orientation = Vector3.new(0, 0, 0)
        Coin.CoinVisual.Orientation = Vector3.new(0, 0, 0)
   end
end

function HideAllCoins()
    local Map = GetMap() or Workspace:FindFirstChild("Barn")
    local CoinContainer = Map:FindFirstChild("CoinContainer") or Map:FindFirstChild("CoinsAreas")
    local MinDistance = math.huge
    local Coin = nil
    
if not Map and not CoinContainer then
  return
end

    if CoinContainer and LocalPlayer and LocalPlayer.Character then
        for _, v in pairs(CoinContainer:GetChildren()) do
            if v.Name == "Coin_Server" and v:FindFirstChildWhichIsA("TouchTransmitter") and v:FindFirstChild("CoinVisual") then
                local Distance = (LocalPlayer.Character.HumanoidRootPart.Position - v.Position).Magnitude
                if Distance < MinDistance then
                    Coin = v
                    MinDistance = Distance
                end
            end
        end
    end
    
if Coin then
        Coin.Transparency = 1
        Coin.CoinVisual.Transparency = 1
   end
end

Tabs.AutoFarm:AddParagraph({
        Title = "Farming Features",
        Content = " "
    })

local StartFarm = false
local Gravity = workspace.Gravity
local TweenAutoFarm = false
local TPAutoFarm = false
local AutoReset = false
local AutoFarmXP = false
local TypeAutoFarm = "Nearest"

local Toggle = Tabs.AutoFarm:AddToggle("TweenFarm", {Title = "Auto Farm Coins", Default = false })

Toggle:OnChanged(function(value)
   TweenAutoFarm = value
   
   if TweenAutoFarm then
   
     if getNearestCoins() then
     spawn(function()
         LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(getNearestCoins().Position)
      end)
    end
    
      wait(0.1)
      StartFarm = true
      workspace.Gravity = 0
      LocalPlayer.Character.PrimaryPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
 else
      workspace.Gravity = Gravity
      LocalPlayer.Character.Humanoid.PlatformStand = false
      LocalPlayer.Character.Humanoid.Sit = false
   end
  
  while TweenAutoFarm and wait(0.1) do
   spawn(function()
     if StartFarm then
        LocalPlayer.Character.PrimaryPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        workspace.Gravity = 0
        LocalPlayer.Character.Humanoid.PlatformStand = true
        Tween({
        	targetPart = getNearestCoins(),
            newCFrame = CFrame.new(0, -3.8, 0) * CFrame.Angles(math.rad(90), 0, 0) or CFrame.new(0, LocalPlayer.Character.Humanoid.HipHeight, 0) * CFrame.Angles(math.rad(90), 0, 0)
         })
       end
   end)
   
  if not LocalPlayer.Character.PrimaryPart or not getNearestCoins() then
         StartFarm = false
      return
   end
end
    
    Remotes.Gameplay.CoinsStarted.OnClientEvent:Connect(function()
     if TweenAutoFarm then
       StartFarm = true
       
       LocalPlayer.Character.Humanoid.Sit = true
   spawn(function()
       LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(getNearestCoins().Position)
         end)
       end
   end)
   
   Remotes.Gameplay.CoinCollected.OnClientEvent:Connect(function(Currency, CurrentCoins, MaxCoins)
   if TweenAutoFarm and CurrentCoins == MaxCoins then
         StartFarm = false
         LocalPlayer.Character.Humanoid.PlatformStand = false
         LocalPlayer.Character.Humanoid.Sit = false
         workspace.Gravity = Gravity
      end
   end)
   
  Remotes.Gameplay.VictoryScreen.OnClientEvent:Connect(function()
  if TweenAutoFarm then
       StartFarm = false
       LocalPlayer.Character.Humanoid.PlatformStand = false
       LocalPlayer.Character.Humanoid.Sit = false
       workspace.Gravity = Gravity
          end
     end)
end)

local Input = Tabs.AutoFarm:AddInput("TweenSpeed", {
        Title = "Tween Speed",
        Default = TweenSpeed,
        Placeholder = "25",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            TweenSpeed = tonumber(Value) or 25
        end
    })

local Toggle = Tabs.AutoFarm:AddToggle("XPFarm", {Title = "Auto Farm XP", Default = false })

Toggle:OnChanged(function(state1)
AutoFarmXP = state1

  Remotes.Gameplay.CoinCollected.OnClientEvent:Connect(function(Currency, CurrentCoins, MaxCoins)
   if AutoFarmXP and CurrentCoins == MaxCoins then
       wait(0.5)
       function autokillallloopfix()
        EquipToolKnife()
        wait()
        local localCharacter = game.Players.LocalPlayer.Character
        local knife = localCharacter and localCharacter:FindFirstChild("Knife")
        wait()
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                wait()
                local playerCharacter = player.Character
                local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
                
                if humanoidRootPart then
                    Stab()
                    firetouchinterest(humanoidRootPart, knife.Handle, 1)
                    firetouchinterest(humanoidRootPart, knife.Handle, 0)
                end
            end
        end
        wait()
    end
    wait()
    pcall(autokillallloopfix) 
         game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(workspace.Lobby.Spawns:FindFirstChild("SpawnLocation").Position) * CFrame.new(0,2.5,0) 
      end
   end)
end)

local Toggle = Tabs.AutoFarm:AddToggle("AutoReset", {Title = "Auto Reset When Coins Bag Full", Default = false })

Toggle:OnChanged(function(state2)
   AutoReset = state2
   
   Remotes.Gameplay.CoinCollected.OnClientEvent:Connect(function(Currency, CurrentCoins, MaxCoins)
   if AutoReset and CurrentCoins == MaxCoins then
         LocalPlayer.Character.Humanoid.Health = 0
      end
   end)
end)

local AuraCoins = false
local HideCoins = false

Tabs.AutoFarm:AddParagraph({
        Title = "Coins Mods",
        Content = "WARNING: U might kicked because of lag or speed glitching"
    })

local Toggle = Tabs.AutoFarm:AddToggle("CoinsAura", {Title = "Coins Aura", Default = false })

Toggle:OnChanged(function(state3)
   AuraCoins = state3
   
   while AuraCoins and wait(0.1) do
      spawn(CoinsAura)
   end
end)

local Toggle = Tabs.AutoFarm:AddToggle("HideCoins", {Title = "Hide Coins", Default = false })

Toggle:OnChanged(function(state4)
   HideCoins = state4
   
   while AuraCoins and wait(0.1) do
      spawn(HideAllCoins)
   end
end)

local Toggle = Tabs.Main:AddToggle("CoinChams", {
    Title = "Coin Chams",
    Default = false,
    Callback = function(value)
        if value then 
            repeat task.wait()
                if GetMap() then
                    for _, v in pairs(GetMap():GetChildren()) do
                        if v.Name == 'Coin_Server' and not highlights[v] then
                            local esp = Instance.new("Highlight")
                            esp.Name = "CoinESP"
                            esp.FillTransparency = 0.5
                            esp.FillColor = Color3.new(94/255, 1, 255/255)
                            esp.OutlineColor = Color3.new(94/255, 1, 255/255)
                            esp.OutlineTransparency = 0
                            esp.Parent = v.Parent
                            highlights[v] = esp  
                        end
                    end
                end 
            until not Options.CoinChams.Value
            for _, highlight in pairs(highlights) do
                highlight:Destroy()
            end         
        end
    end
})

-- Combat

Tabs.Combat:AddParagraph({
        Title = "Murderer",
        Content = " "
    })

local throwkniferange = 3
local throwhitboxloop = false
local kniferangenum = 8
local knifeauraloop = false
    
local Toggle = Tabs.Combat:AddToggle("KnifeAura", {Title = "Kill Aura", Default = false })

    Toggle:OnChanged(function(knifeaura)
        knifeauraloop = knifeaura
    while knifeauraloop do
        function thtrhthtr()
        for i,v in pairs(game.Players:GetPlayers()) do
            if v ~= game.Players.LocalPlayer and game.Players.LocalPlayer:DistanceFromCharacter(v.Character.HumanoidRootPart.Position) < kniferangenum then
                EquipToolKnife()
                wait()
                local localCharacter = game.Players.LocalPlayer.Character
                local knife = localCharacter and localCharacter:FindFirstChild("Knife")
                wait()
                local playerCharacter = v.Character
                local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
                
                if humanoidRootPart then
                    Stab()
                    firetouchinterest(humanoidRootPart, knife.Handle, 1)
                    firetouchinterest(humanoidRootPart, knife.Handle, 0)
                end
            end
        end
    end
    wait()
    pcall(thtrhthtr)
    end
end)

local Input = Tabs.Combat:AddInput("KillAuraRange", {
        Title = "Kill Aura Range",
        Default = kniferangenum,
        Placeholder = "Input",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            kniferangenum = tonumber(Value) or 8
        end
    })
    
function getNearestThrowPlayer()
    local NearestTarget = nil
    local Distance = math.huge

    for _, v in pairs(game.Players:GetPlayers()) do
        if v.Name ~= game.Players.LocalPlayer.Name then
            pcall(function()
                if v.Character and v.Character:FindFirstChild("HumanoidRootPart") then
                    for _, knife in pairs(workspace:GetChildren()) do
                        if knife.Name == "ThrowingKnife" and knife:FindFirstChild("KnifeVisual") then
                            local KnifeVisual = knife.KnifeVisual
                            local Mag = (v.Character.HumanoidRootPart.Position - KnifeVisual.Position).Magnitude
                            if Mag < Distance then
                                NearestTarget = v
                                Distance = Mag
                            end
                        end
                    end
                end
            end)
        end
    end

    return NearestTarget
end
    
function SetThrowHitbox()
if game.Players.LocalPlayer.Character:FindFirstChild("Knife") or game.Players.LocalPlayer.Backpack:FindFirstChild("Knife") then
    for i, v in pairs(Workspace:GetChildren()) do
          if v.Name == "ThrowingKnife" and v:FindFirstChild("KnifeVisual") then
            --    v.BladePosition.Size = Vector3.new(throwkniferange, throwkniferange, throwkniferange)
                  v.KnifeVisual.Size = Vector3.new(throwkniferange, throwkniferange, throwkniferange)
            end
        end
  else
      for i, v in pairs(Workspace:GetChildren()) do
         if v.Name == "ThrowingKnife" and v:FindFirstChild("KnifeVisual") then
            --    v.BladePosition.Size = Vector3.new(1, 1, 1)
                v.KnifeVisual.Size = Vector3.new(1, 1, 1)
            end
        end
    end
end
    
local Toggle = Tabs.Combat:AddToggle("ThrowHitbox", {Title = "Throw Hitbox", Default = false })

    Toggle:OnChanged(function(throwaura)
        throwhitboxloop = throwaura
    while throwhitboxloop and wait() do
        SetThrowHitbox()
    end
end)

local Input = Tabs.Combat:AddInput("ThrowHitboxSize", {
        Title = "Throw Hitbox Size",
        Default = throwkniferange,
        Placeholder = "3",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            throwkniferange = tonumber(Value) or 3
        end
    })

Tabs.Combat:AddButton({
        Title = "Fast Throw",
        Description = "Warning: It can Affect the Client",
        Callback = function()
            g = hookfunction(wait, function(seconds) return g(0) end)
            visualg = hookfunction(wait, function(seconds) return g(0) end)
        end
    })

local MurdererSilentAim = false

local Toggle = Tabs.Combat:AddToggle("SilentThrowAim", {Title = "Throw Knife Silent Aim", Default = false })

    Toggle:OnChanged(function(ThrowAim)
        MurdererSilentAim = ThrowAim
end)

Tabs.Combat:AddParagraph({
        Title = " ",
        Content = ""
    })
    
local Toggle = Tabs.Combat:AddToggle("Autokillall", {Title = "Auto Kill all", Default = false })

    Toggle:OnChanged(function(autokillall)
        autokillallloop = autokillall
    while autokillallloop do
        function autokillallloopfix()
        EquipToolKnife()
        wait()
        local localCharacter = game.Players.LocalPlayer.Character
        local knife = localCharacter and localCharacter:FindFirstChild("Knife")
        wait()
        for _, player in ipairs(game.Players:GetPlayers()) do
            if player ~= game.Players.LocalPlayer then
                wait()
                local playerCharacter = player.Character
                local humanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")
                
                if humanoidRootPart then
                    Stab()
                    firetouchinterest(humanoidRootPart, knife.Handle, 1)
                    firetouchinterest(humanoidRootPart, knife.Handle, 0)
                end
            end
        end
        wait()
    end
    wait()
    pcall(autokillallloopfix)
    end
 end)

Tabs.Combat:AddParagraph({
        Title = "Sheriff",
        Content = ""
    })
    
local SheriffAim = false
local SilentAimType = "Linear"
local GetGunAuto = false
local AutoShoot = false
local KillMurder = false
local GunAccuracy = 50

function AutoKillMurderer()
if game.Players.LocalPlayer.Character:FindFirstChild("Gun") or game.Players.LocalPlayer.Backpack:FindFirstChild("Gun") then
  tptoplayer = players:FindFirstChild(Murder)
   LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = CFrame.new(tptoplayer.Character:WaitForChild("HumanoidRootPart").Position + Vector3.new(0, 0, 4))

local Root = Players[tostring(Murder)].Character.PrimaryPart
local Veloc = Root.AssemblyLinearVelocity                       
local Pos = Root.Position 
local Equipped = true

EquipToolGun()
Equipped = false
                        
 if Veloc.Magnitude == 0 then
      spawn(function()
            game.Players.LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(
                    1,
                    Pos,
                    "AH2"
                )
        end)
   else
   local velocityUnit = Veloc.Unit
   local velocityMagnitude = Veloc.Magnitude
   local silentAimPosition = Pos + Vector3.new((velocityUnit * velocityMagnitude) / 17 + Root.Parent.Humanoid.MoveDirection)
      spawn(function()
            game.Players.LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(
                    1,
                    silentAimPosition,
                    "AH2"
                )
        end)
      end
      
  if not Equipped then
        LocalPlayer.Character.Humanoid:UnequipTools()
         end
     end
 end

function NotObstructing(targetPosition, ignoreList)
    if AutoShoot or WallCheck then
        local cameraPosition = workspace.CurrentCamera.CFrame.Position
        local rayDirection = (targetPosition - cameraPosition).unit * (targetPosition - cameraPosition).magnitude

        -- Setup Raycast Parameters
        local raycastParams = RaycastParams.new()
        raycastParams.FilterType = Enum.RaycastFilterType.Blacklist
        raycastParams.FilterDescendantsInstances = ignoreList
        raycastParams.IgnoreWater = true

        -- Perform Raycast
        local raycastResult = workspace:Raycast(cameraPosition, rayDirection, raycastParams)

        -- Check if the hit part is valid or transparent and non-collidable
        local hitPart = raycastResult and raycastResult.Instance
        local hitInvisibleWall = hitPart and hitPart.Transparency == 1 and not hitPart.CanCollide

        return not hitPart or hitInvisibleWall
    else
        return true
    end
end

function AutoShootMurd()
if game.Players.LocalPlayer.Character:FindFirstChild("Gun") or game.Players.LocalPlayer.Backpack:FindFirstChild("Gun") then
EquipToolGun()
  
  if NotObstructing(Murderer.Character.PrimaryPart.Position, {LocalPlayer.Character.PrimaryPart}) then
local Root = Players[tostring(Murder)].Character.PrimaryPart
local Veloc = Root.AssemblyLinearVelocity                       
local Pos = Root.Position 
                        
 if Veloc.Magnitude == 0 then
      spawn(function()
            game.Players.LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(
                    1,
                    Pos,
                    "AH2"
                )
        end)
   else
   local velocityUnit = Veloc.Unit
   local velocityMagnitude = Veloc.Magnitude
   local silentAimPosition = Pos + Vector3.new((velocityUnit * velocityMagnitude) / 17 + Root.Parent.Humanoid.MoveDirection)
      spawn(function()
            game.Players.LocalPlayer.Character.Gun.KnifeLocal.CreateBeam.RemoteFunction:InvokeServer(
                    1,
                    silentAimPosition,
                    "AH2"
                )
        end)
    end           
    wait(0.2)
    LocalPlayer.Character.Humanoid:UnequipTools()
    wait(2)
        end
    end
end

function AutoGetGun()
  if not Innocent == game.Players.LocalPlayer.Name or not Murderer == game.Players.LocalPlayer.Name then
    return
  end
  
  local Map = GetMap()
        if Map then
            local GunDrop = Map:FindFirstChild("GunDrop")
            if GunDrop then
              firetouchinterest(LocalPlayer.Character.HumanoidRootPart, GunDrop, 1)
              firetouchinterest(LocalPlayer.Character.HumanoidRootPart, GunDrop, 0)
         end
     end
end

local GunDropRange = 5
local GunDropHitbox = false

function GetGunDropasAura()
  if not Innocent == game.Players.LocalPlayer.Name or not Murderer == game.Players.LocalPlayer.Name then
    return
  end
  
  local Map = GetMap()
        if Map then
            local GunDrop = Map:FindFirstChild("GunDrop")
            if GunDrop and LocalPlayer:DistanceFromCharacter(GunDrop.Position) <= GunDropRange then
              firetouchinterest(LocalPlayer.Character.HumanoidRootPart, GunDrop, 1)
              firetouchinterest(LocalPlayer.Character.HumanoidRootPart, GunDrop, 0)
         end
     end
end

local function getNearestTargetPlayer()
		local NearestTarget = nil
		local Distance = math.huge
			for i, v in pairs(game.Players.GetPlayers()) do
				if v.Name ~= LocalPlayer.Name then
					pcall(function()
						local Mag = (v.Character.HumanoidRootPart.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
						if NearestTarget > Mag then
							NearestTarget = v
							Distance = i
						end
					end)
				end
			end
			
    return NearestTarget
end

local GunHook
GunHook = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    local args = { ... }

    if not checkcaller() then
        if typeof(self) == "Instance" then
            if self.Parent and self.Parent.Name == "CreateBeam" and self.Name == "RemoteFunction" and method == "InvokeServer" then
                if SheriffAim and GunAccuracy and Murderer then
                    local Root = Players[tostring(Murderer)].Character.PrimaryPart
                    local Velocity = Root.AssemblyLinearVelocity
                    local Pos = Root.Position

                    if SilentAimType == "Linear" then
                        Pos = Pos + (Velocity * Vector3.new(GunAccuracy / 200, 0, GunAccuracy / 200))
                        
                        args[2] = Pos
                    elseif SilentAimType == "Dynamic" then
                        Pos = Pos + Root.Parent.Humanoid.MoveDirection
                        
                        args[2] = Pos
                    elseif SilentAimType == "Seismic" then
                        if Velocity.Magnitude == 0 then
                            args[2] = Pos
                        else
                            local velocityUnit = Velocity.Unit
                            local velocityMagnitude = Velocity.Magnitude
                            local silentAimPosition = Pos + Vector3.new((velocityUnit * velocityMagnitude) / 16.5)
                            args[2] = silentAimPosition
                        end
                    elseif SilentAimType == "Overflow" then
                        if Velocity.Magnitude == 0 then
                            args[2] = Pos
                        else
                            local velocityUnit = Velocity.Unit
                            local velocityMagnitude = Velocity.Magnitude
                            local silentAimPosition = Pos + Vector3.new((velocityUnit * velocityMagnitude) / 17 + Root.Parent.Humanoid.MoveDirection)
                            args[2] = silentAimPosition
                        end
                    end
                end
            elseif self.Name == "Throw" and method == "FireServer" then
                local Closest = getNearestTargetPlayer()
                
                if MurdererSilentAim and Closest then
                    local Y = Closest.Character.HumanoidRootPart.AssemblyLinearVelocity / 3
                    
                    args[1] = CFrame.new(Closest.Character.HumanoidRootPart.Position + Vector3.new(Y.X, Y.Y / 1.5, Y.Z))
                end
            end
        end
    end

    return GunHook(self, unpack(args))
end)

local Toggle = Tabs.Combat:AddToggle("SilentAim", {Title = "Silent Aim", Default = false })

Toggle:OnChanged(function(gunsilentaim)
    SheriffAim = gunsilentaim
end)

Tabs.Combat:AddParagraph({
        Title = "",
        Content = "Linear: Needed Accuracy\nDynamic: No Accuracy Needed\nStatic: No Accuracy Needed\nOverflow: No Accuracy Needed"
    })

local Dropdown = Tabs.Combat:AddDropdown("SilentAimType", {
        Title = "Silent Aim Type",
        Values = {"Dynamic", "Linear", "Seismic", "Overflow"},
        Multi = false,
        Default = 2,
    })

    Dropdown:OnChanged(function(Value)
        SilentAimType = Value
    end)

local Input = Tabs.Combat:AddInput("ShootAccuracy", {
    Title = "Silent Aim Accuracy",
    Default = tostring(GunAccuracy),
    Placeholder = "50",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Only calls callback when you press enter
    Callback = function(shoot)
        GunAccuracy = tonumber(shoot) or 50
    end
})

local Toggle = Tabs.Combat:AddToggle("GunDropAura", {Title = "Gun Drop Aura", Default = false })

Toggle:OnChanged(function(GunDropVa)
    GunDropHitbox = GunDropVa
    
 while GunDropHitbox and wait(0.1) do
    GetGunDropasAura()
   end
end)

local Input = Tabs.Combat:AddInput("RangeGunDropAura", {
    Title = "Gun Drop Range",
    Default = tostring(GunDropRange),
    Placeholder = "5",
    Numeric = true, -- Only allows numbers
    Finished = true, -- Only calls callback when you press enter
    Callback = function(Value)
        GunDropRange = tonumber(Value) or 5
    end
})

Tabs.Combat:AddParagraph({
        Title = " ",
        Content = ""
    })

local Toggle = Tabs.Combat:AddToggle("AutoGrabGun", {Title = "Auto Grab Gun", Default = false })

Toggle:OnChanged(function(gungrabber)
    GetGunAuto = gungrabber
    
 while GetGunAuto and wait(0.1) do
    AutoGetGun()
   end
end)

local Toggle = Tabs.Combat:AddToggle("AutoKillMurder", {Title = "Auto Kill Murderer", Default = false })

Toggle:OnChanged(function(gunKillMurd)
    KillMurderer = gunKillMurd
    
 while KillMurder and wait() do
    AutoKillMurderer()
   end
end)

local Toggle = Tabs.Combat:AddToggle("AutoShootMurderer", {Title = "Auto Shoot Murderer", Default = false })

Toggle:OnChanged(function(MurdShoot)
    AutoShoot = MurdShoot
    
 while AutoShoot and wait(0.1) do
    AutoShootMurd()
   end
end)

Tabs.Combat:AddParagraph({
        Title = "Aimbot",
        Content = "Coming Soon"
    })
    
-- Misc

 Tabs.Misc:AddParagraph({
        Title = "Toggle",
        Content = " "
    })
            
function timernotify()
local player = game.Players.LocalPlayer

-- Create a new ScreenGui and Frame
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = player.PlayerGui
screenGui.ResetOnSpawn = false
screenGui.Name = "TimerGui"

-- Create a TextLabel for the timer
local timerLabel = Instance.new("TextLabel")
timerLabel.Parent = screenGui
timerLabel.Size = UDim2.new(0, 200, 0, 50)
timerLabel.Position = UDim2.new(0.5, -100, 0.1, 0) -- Centered on screen
timerLabel.BackgroundTransparency = 1 -- Make background invisible
timerLabel.TextScaled = true
timerLabel.Font = Enum.Font.GothamBold
timerLabel.TextColor3 = Color3.new(1, 1, 1) -- White text
end

function detimer()
local player = game.Players.LocalPlayer

if player.PlayerGui:FindFirstChild("TimerGui") then
    player.PlayerGui.TimerGui:Destroy()
  end
end

local TimerText = false

local Toggle = Tabs.Misc:AddToggle("TimerNotifier", {Title = "Show Timer", Default = false })

    Toggle:OnChanged(function(State)
    TimerText = State

   if TimerText then
   timernotify()
else
   detimer()
  end

    while TimerText and wait(0.1) do
       local timerPart = game.Workspace:FindFirstChild("RoundTimerPart")
            if timerPart and timerPart:FindFirstChild("SurfaceGui") and timerPart.SurfaceGui:FindFirstChild("Timer") then
                game.Players.LocalPlayer.PlayerGui.TimerGui.TextLabel.Text = timerPart.SurfaceGui.Timer.Text
            end
        end
    end)
    
local Toggle = Tabs.Misc:AddToggle("AntiAfk", {Title = "Anti-AFK", Default = false })

    Toggle:OnChanged(function()
local vu = game:GetService("VirtualUser")
repeat wait() until game:IsLoaded() 
	game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualUser"):ClickButton2(Vector2.new())
		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
		wait(1)
		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
     end)
 end)

Options.AntiAfk:SetValue(true)
    
 local Toggle = Tabs.Misc:AddToggle("ImproveFPS", {Title = "Improve FPS", Default = false })

    Toggle:OnChanged(function(improvefps)
    improvefpsloop = improvefps
    while improvefpsloop do
        for i,v in pairs (workspace:GetDescendants()) do
            if v.Name == "Pet" then
                v:Destroy()
            elseif v.Name == "KnifeDisplay" then
                v:Destroy()
            elseif v.Name == "GunDisplay" then
                v:Destroy()
            end
        end
        wait(10)
    end
    end)
    
 local Toggle = Tabs.Misc:AddToggle("DeleteDecals", {Title = "Delete All Decals", Default = false })

    Toggle:OnChanged(function(deletealldecals)
    removedecals = deletealldecals
    end)
    
 local Toggle = Tabs.Misc:AddToggle("AllEmotes", {Title = "Get All Emotes", Default = false })

    Toggle:OnChanged(function(getallemotes)
    emotesondeath = getallemotes
    if emotesondeath == true then
        SpawnEmotes()
        wait()
    end
    end)

-- Players

Tabs.Players:AddParagraph({
        Title = "Humanoid",
        Content = " "
    })
    
local Input = Tabs.Players:AddInput("Walkspeed", {
        Title = "Walk Speed",
        Default = "16",
        Placeholder = "number",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(newspeed)
   game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = tonumber(newspeed)
        end
    })
    
local Input = Tabs.Players:AddInput("Jumppower", {
        Title = "Jump Power",
        Default = "50",
        Placeholder = "number",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(newjump)
   game.Players.LocalPlayer.Character.Humanoid.JumpPower = tonumber(newjump)
        end
    })

Tabs.Players:AddParagraph({
        Title = "Character",
        Content = " "
    })
   
 local GodModeTG = false
   
 local Toggle = Tabs.Players:AddToggle("TwoLivesmode", {Title = "Two Lives", Default = false })

Toggle:OnChanged(function(State)
      GodModeTG = State
    if GodModeTG then
        TwoLifes()
     end
end)
 
 local InfiniteJumpEnabled = false

local Toggle = Tabs.Players:AddToggle("AirJump", {Title = "Air Jump", Default = false })

Toggle:OnChanged(function(State)
    InfiniteJumpEnabled = State
end)

local Player = game:GetService("Players").LocalPlayer
game:GetService("UserInputService").JumpRequest:Connect(function()
    if InfiniteJumpEnabled then
        Player.Character:WaitForChild("Humanoid"):ChangeState("Jumping")
    end
end)
  
Options.AirJump:SetValue(false)
  

local Toggle = Tabs.Players:AddToggle("Noclip", {Title = "Noclip", Default = false })

local NoClipx = false

local function Noclip()
    game:GetService('RunService').RenderStepped:Connect(function()
        if NoClipx then
            pcall(function()
                for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                    if v:IsA("BasePart") then
                        v.CanCollide = false
                        RunService.RenderStepped:Wait()
                    end
                end
            end)
        end
    end)
end

    Toggle:OnChanged(function(State)
NoClipx = State
    end)

Noclip()

Options.Noclip:SetValue(false)
    
    
 Tabs.Players:AddParagraph({
        Title = "Others",
        Content = " "
    })

local FLYING = false
local velocityHandlerName = "VelocityHandler"
local gyroHandlerName = "GyroHandler"
local mfly1, mfly2
local currentCharacter

local function getRoot(character)
    return character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso")
end

local function unmobilefly(player)
    pcall(function()
        FLYING = false
        local character = player.Character
        if character then
            local root = getRoot(character)
            if root then
                local velocityHandler = root:FindFirstChild(velocityHandlerName)
                local gyroHandler = root:FindFirstChild(gyroHandlerName)

                if velocityHandler then
                    velocityHandler:Destroy()
                end

                if gyroHandler then
                    gyroHandler:Destroy()
                end

                local humanoid = character:FindFirstChildWhichIsA("Humanoid")
                if humanoid then
                    humanoid.PlatformStand = false
                end
            end
        end

        if mfly1 then
            mfly1:Disconnect()
        end

        if mfly2 then
            mfly2:Disconnect()
        end
    end)
end

local function mobilefly(player, vfly)
    unmobilefly(player)
    FLYING = true

    local character = player.Character
    local root = getRoot(character)

    if character and root then
        local camera = workspace.CurrentCamera
        local v3none = Vector3.new()
        local v3zero = Vector3.new(0, 0, 0)
        local v3inf = Vector3.new(9e9, 9e9, 9e9)

        local controlModule = require(player.PlayerScripts:WaitForChild("PlayerModule"):WaitForChild("ControlModule"))
        local bv = Instance.new("BodyVelocity")
        bv.Name = velocityHandlerName
        bv.Parent = root
        bv.MaxForce = v3zero
        bv.Velocity = v3zero

        local bg = Instance.new("BodyGyro")
        bg.Name = gyroHandlerName
        bg.Parent = root
        bg.MaxTorque = v3inf
        bg.P = 1000
        bg.D = 20

        mfly1 = player.CharacterAdded:Connect(function()
            unmobilefly(player)
            currentCharacter = player.Character
            mobilefly(player, vfly)
        end)

        mfly2 = RunService.RenderStepped:Connect(function()
            root = getRoot(player.Character)
            camera = workspace.CurrentCamera
            if player.Character:FindFirstChildWhichIsA("Humanoid") and root and root:FindFirstChild(velocityHandlerName) and root:FindFirstChild(gyroHandlerName) then
                local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
                local VelocityHandler = root:FindFirstChild(velocityHandlerName)
                local GyroHandler = root:FindFirstChild(gyroHandlerName)

                if VelocityHandler and GyroHandler then
                    VelocityHandler.MaxForce = v3inf
                    GyroHandler.MaxTorque = v3inf

                    if not vfly and humanoid then
                        humanoid.PlatformStand = false
                    end

                    GyroHandler.CFrame = camera.CoordinateFrame
                    VelocityHandler.Velocity = v3none

                    local direction = controlModule:GetMoveVector()
                    if direction.X ~= 0 or direction.Z ~= 0 then
                        local moveVector = Vector3.new(direction.X, 0, direction.Z).unit
                        local rightVector = camera.CFrame.RightVector
                        local forwardVector = camera.CFrame.LookVector

                        local flyDirection = (rightVector * moveVector.X - forwardVector * moveVector.Z).unit

                        VelocityHandler.Velocity = flyDirection * (_G.flySpeed * 20)
                        RunService.RenderStepped:Wait()
                    end
                end
            end
        end)
    end
end

local function toggleFly(player, toggleValue)
    if toggleValue then
        mobilefly(player, true)
    else
        unmobilefly(player)
    end
end

-- Your loop structure
_G.loops = false

local function flyLoop()
    while wait(3) do
        if _G.loops then
            local player = game.Players.LocalPlayer
            if player and player.Character then
                mobilefly(player, true)
            end
        end
    end
end

local Toggle = Tabs.Players:AddToggle("FlyToggle", { Title = "Fly Toggle", Default = false })

Toggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    _G.loops = Toggle.Value
    toggleFly(player, Toggle.Value)
end)

Options.FlyToggle:SetValue(false)

_G.flySpeed = 20  -- Default fly speed

local FlySpeedInput = Tabs.Players:AddInput("FlySpeedInput", {
    Title = "Fly Speed (ignore about the error)",
    Default = tostring(_G.flySpeed),
    Placeholder = "Enter fly speed",
    Numeric = true,
    Finished = false,
    Callback = function(Value)
        _G.flySpeed = tonumber(Value) or 20
        toggleFly(player, Toggle.Value)
    end
})

-- Start the loop
spawn(flyLoop)

-- Trolls

function GetOtherPlayers()
        local players = {}
        for _, Player in ipairs(game.Players:GetPlayers()) do
            if Player ~= game.Players.LocalPlayer then
                table.insert(players, Player.Name)
            end
        end
        return players
end

Tabs.Trolls:AddParagraph({
        Title = "Spectating Features",
        Content = " "
    })
    
 local SpectateDropdown = Tabs.Trolls:AddDropdown("SpectatingDropDown", {
        Title = "Select Player to Spectate",
        Values = GetOtherPlayers(),
        Multi = false,
        Default = "",
    })

    SpectateDropdown:OnChanged(function(Value)
      if Value and Value ~= "" then
           workspace.Camera.CameraSubject = game:GetService("Players")[Value].Character:WaitForChild("Humanoid")
        end
    end)
    
function UpdateSpectateDropdown()
SpectateDropdown.Values = GetOtherPlayers()
SpectateDropdown:SetValue("") 
end

Tabs.Trolls:AddButton({
        Title = "View Murderer",
        Description = "Change Camera View to Murderer",
        Callback = function()
            local Players = game:GetService("Players")
            local camera = workspace.Camera

            if Murder and Players:FindFirstChild(Murder) then
                camera.CameraSubject = Players[Murder].Character:WaitForChild("Humanoid")
            else
                print("Murderer Not Found")
            end
        end
})

Tabs.Trolls:AddButton({
Title = "View Sheriff/Hero",
Description = "Change Camera View to Sheriff, Hero, or GunDrop",
Callback = function()
        local Players = game:GetService("Players")
        local camera = workspace.Camera

        local SheriffExists = Sheriff and Players:FindFirstChild(Sheriff) and IsAlive(Players[Sheriff])
        local HeroExists = Hero and Players:FindFirstChild(Hero) and IsAlive(Players[Hero])

        if SheriffExists then
            camera.CameraSubject = Players[Sheriff].Character:WaitForChild("Humanoid")
        elseif HeroExists then
            camera.CameraSubject = Players[Hero].Character:WaitForChild("Humanoid")
        else
            print("Not Found")
        end
end
})

Tabs.Trolls:AddButton({
        Title = "Stop Viewing",
        Description = "Stop viewing the selected Player",
        Callback = function()
         workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character:WaitForChild("Humanoid")
         SpectateDropdown:SetValue("") 
    end
})

Tabs.Trolls:AddParagraph({
        Title = "Fling Features",
        Content = " "
    })
    
local FlingDropdown = Tabs.Trolls:AddDropdown("FlingDropDown", {
        Title = "Select Player to Fling",
        Values = GetOtherPlayers(),
        Multi = false,
        Default = "",
    })

    FlingDropdown:OnChanged(function(Value)
        if Value and Value ~= "" then
           workspace.Camera.CameraSubject = game:GetService("Players")[Value].Character:WaitForChild("Humanoid")
        end
    end)
    
function UpdateFlingDropdown()
FlingDropdown.Values = GetOtherPlayers()
FlingDropdown:SetValue("") 
end

game.Players.PlayerAdded:Connect(UpdateSpectateDropdown)
game.Players.PlayerRemoving:Connect(UpdateSpectateDropdown)
game.Players.PlayerAdded:Connect(UpdateFlingDropdown)
game.Players.PlayerRemoving:Connect(UpdateFlingDropdown)

Tabs.Trolls:AddParagraph({
        Title = "Abusing Stuff",
        Content = ""
    })
    
local CFrameWidth = -20
    
 Tabs.Trolls:AddButton({
        Title = "Fake Speed Glitch",
        Description = "",
        Callback = function()
         local pl = game.Players.LocalPlayer
        local s = pl.Backpack:GetChildren()
        local s0 = {}

        for _, x in pairs(s) do
            if x:IsA("Folder") then
                wait()
            else
                table.insert(s0, x)
            end
        end

        if #s0 >= 2 then
            s0[1].Grip = CFrame.new(0, 0, 0)
            s0[1].Parent = pl.Character

            s0[2].Grip = CFrame.new(CFrameWidth, 0, 0)
            s0[2].Parent = pl.Character
        else
            warn("Not enough tools in backpack.")
            end
        end
    })

local Input = Tabs.Trolls:AddInput("Width", {
        Title = "Speed Glitch Length",
        Default = CFrameWidth,
        Placeholder = "-20",
        Numeric = false, -- Only allows numbers
        Finished = false, -- Only calls callback when you press enter
        Callback = function(Value)
            CFrameWidth = tonumber(Value) or 25
        end
    })

-- Settings

-- Save Manager

Tabs.Settings:AddParagraph({
        Title = "Save Config",
        Content = " "
    })

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:SetIgnoreIndexes({})

-- Save Folder
InterfaceManager:SetFolder("UnknownHubXUniversal")
SaveManager:SetFolder("UnknownHubXUniversal/MurderMystery2")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

-- Auto Load Configuration
SaveManager:LoadAutoloadConfig()
